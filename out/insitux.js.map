{"version":3,"file":"insitux.js","mappings":"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","sources":["webpack://insitux/webpack/bootstrap","webpack://insitux/webpack/runtime/define property getters","webpack://insitux/webpack/runtime/hasOwnProperty shorthand","webpack://insitux/webpack/runtime/make namespace object","webpack://insitux/./src/poly-fills.ts","webpack://insitux/./src/types.ts","webpack://insitux/./src/checks.ts","webpack://insitux/./src/parse.ts","webpack://insitux/./src/test.ts","webpack://insitux/./src/val.ts","webpack://insitux/./src/index.ts","webpack://insitux/./src/invoker.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const toNum = (x: unknown): number => Number(x); //Should also support 0b and 0x\r\nexport const slice = <T>(arr: T[], start?: number, end?: number): T[] =>\r\n  arr.slice(start, end);\r\nexport const splice = <T>(arr: T[], start: number, numDel?: number): T[] =>\r\n  arr.splice(start, numDel);\r\nexport const len = <T>(arr: T[]): number => arr.length;\r\nexport const slen = (str: string): number => str.length;\r\nexport const isNum = (x: unknown): x is number => !Number.isNaN(Number(x));\r\nexport const isArray = <T>(x: unknown): x is T[] => Array.isArray(x);\r\nexport const substr = (str: string, start: number, length?: number): string =>\r\n  str.substring(start, start + (length ?? str.length));\r\nexport const strIdx = (str: string, idx: number): string => str[idx];\r\nexport const sub = (x: string, s: string): boolean => x.includes(s);\r\nexport const subIdx = (x: string, s: string) => x.indexOf(s);\r\nexport const has = <T>(x: T[], y: T): boolean => x.includes(y);\r\nexport const starts = (str: string, x: string): boolean => str.startsWith(x);\r\nexport const ends = (str: string, x: string): boolean => str.endsWith(x);\r\nexport const flat = <T>(arr: T[][]): T[] => arr.flat(); //e.g. [[0], [1], []] => [0, 1]\r\nexport const concat = <T>(a: T[], b: T[]): T[] => a.concat(b);\r\nexport const push = <T>(arr: T[], add: T[]) => arr.push(...add);\r\nexport const sortBy = <T>(arr: T[], by: (a: T, b: T) => number) => arr.sort(by);\r\nexport const reverse = <T>(arr: T[]) => arr.reverse();\r\nexport const lowerCase = (str: string) => str.toLowerCase();\r\nexport const upperCase = (str: string) => str.toUpperCase();\r\nexport const trim = (str: string) => str.trim();\r\nexport const trimStart = (str: string) => str.trimStart();\r\nexport const trimEnd = (str: string) => str.trimEnd();\r\nexport const padEnd = (str: string, by: number) => str.padEnd(by);\r\nexport const charCode = (str: string): number => str.charCodeAt(0);\r\nexport const codeChar = (num: number): string => String.fromCharCode(num);\r\nexport const randNum = (a: number, b: number) => a + Math.random() * (b - a);\r\nexport const randInt = (a: number, b: number) => Math.floor(randNum(a, b));\r\nexport const range = (len: number) => [...Array(len).keys()];\r\nexport const objKeys = (x: object) => Object.keys(x);\r\nexport const getTimeMs = () => new Date().getTime();\r\nexport const abs = Math.abs;\r\nexport const min = Math.min;\r\nexport const max = Math.max;\r\nexport const sin = Math.sin;\r\nexport const cos = Math.cos;\r\nexport const tan = Math.tan;\r\nexport const sqrt = Math.sqrt;\r\nexport const round = Math.round;\r\nexport const floor = Math.floor;\r\nexport const ceil = Math.ceil;\r\nexport const sign = Math.sign;\r\nexport const logn = Math.log;\r\nexport const log2 = Math.log2;\r\nexport const log10 = Math.log10;\r\n","export type Val =\r\n  | { t: \"vec\"; v: Val[] }\r\n  | { t: \"str\" | \"func\" | \"key\" | \"ref\"; v: string }\r\n  | { t: \"null\"; v: undefined }\r\n  | { t: \"wild\"; v: undefined }\r\n  | { t: \"bool\"; v: boolean }\r\n  | { t: \"num\"; v: number }\r\n  | { t: \"clo\"; v: Func }\r\n  | { t: \"dict\"; v: Dict };\r\n\r\nexport type ErrCtx = { sourceId: string; line: number; col: number };\r\nexport type InvokeError = { e: string; m: string; errCtx: ErrCtx };\r\nexport type ValOrErr =\r\n  | { kind: \"val\"; value: Val }\r\n  | { kind: \"err\"; err: string };\r\n/**\r\n * @summary \"empty\" occurs when there was only function declaration;\r\n *          \"val\" occurs when there were no errors and there is a final value;\r\n *          \"errors\" occurs when there were any errors.\r\n */\r\nexport type InvokeResult =\r\n  | { kind: \"empty\" }\r\n  | { kind: \"val\"; value: Val }\r\n  | { kind: \"errors\"; errors: InvokeError[] };\r\n\r\nexport type Dict = {\r\n  keys: Val[];\r\n  vals: Val[];\r\n};\r\n\r\nexport type Func = {\r\n  name: string;\r\n  ins: Ins[];\r\n};\r\nexport type Funcs = { [key: string]: Func };\r\nexport type Env = {\r\n  funcs: Funcs;\r\n  vars: { [key: string]: Val };\r\n};\r\n\r\n/** A context supplied with an Insitux invocation to provide its environment. */\r\nexport type Ctx = {\r\n  /** Called to set an external variable, returning nothing or an error. */\r\n  set: (key: string, val: Val) => undefined | string;\r\n  /** Called to retrieve an external variable,\r\n   * returning the value or an error. */\r\n  get: (key: string) => ValOrErr;\r\n  /** Called to print data out of Insitux. */\r\n  print: (str: string, withNewline: boolean) => void;\r\n  /** Extra function definitions to make available within this invocation */\r\n  functions: ExternalFunction[];\r\n  /** Called when Insitux cannot find a function definition otherwise.\r\n   * You should return an error if unknown externally too. */\r\n  exe: (name: string, args: Val[]) => ValOrErr;\r\n  /** Function and variable definitions, retained by you for each invocation. */\r\n  env: Env;\r\n  /** The number of loops an invocation is permitted. */\r\n  loopBudget: number;\r\n  /** The total length of all `range` calls permitted. */\r\n  rangeBudget: number;\r\n  /** The total number of function calls permitted. */\r\n  callBudget: number;\r\n  /** The total number of explicit recursions permitted.\r\n   * Explicit recursions are unlikely to cause a stack-overflow. */\r\n  recurBudget: number;\r\n};\r\n\r\nexport type ParamsShape = { name: string; position: number[] }[];\r\n\r\nexport type Ins = { errCtx: ErrCtx } & (\r\n  | { typ: \"val\"; value: Val }\r\n  | { typ: \"npa\" | \"upa\"; value: number } //Named and Unnamed parameters\r\n  | { typ: \"dpa\"; value: number[] } //Destructuring parameters\r\n  | { typ: \"var\" | \"let\" | \"ref\"; value: string }\r\n  | { typ: \"dva\" | \"dle\"; value: ParamsShape } //Destructuring var/let\r\n  | { typ: \"exe\"; value: number } //Execute last stack value, number of args\r\n  | { typ: \"exa\"; value: number } //Execute last stack value, number of args, with arity check\r\n  | { typ: \"or\" | \"if\" | \"jmp\" | \"loo\" | \"cat\" | \"mat\"; value: number } //Number of instructions\r\n  | { typ: \"ret\"; value: boolean } //Return, with value?\r\n  | { typ: \"pop\"; value: number } //Truncate stack, by number of values\r\n  | { typ: \"clo\" | \"par\"; value: [string, Ins[]] } //Closure and partial, text representation and instructions\r\n);\r\n\r\n/** Definition of an operation in Insitux,\r\n * with guarantees made for arity (number of parameters) and parameter types.\r\n * Return type is specified to inform the parse-time type-checker. */\r\nexport type Operation = {\r\n  minArity?: number;\r\n  maxArity?: number;\r\n  exactArity?: number;\r\n  numeric?: true | \"in only\";\r\n  params?: (Val[\"t\"] | Val[\"t\"][])[];\r\n  returns?: Val[\"t\"][];\r\n};\r\nexport type ExternalHandler = (params: Val[]) => ValOrErr;\r\nexport type ExternalFunction = {\r\n  name: string;\r\n  definition: Operation;\r\n  handler: ExternalHandler;\r\n};\r\n\r\nexport const ops: {\r\n  [name: string]: Operation & { external?: boolean };\r\n} = {\r\n  print: { returns: [\"null\"] },\r\n  \"print-str\": { returns: [\"null\"] },\r\n  \"!\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"=\": { minArity: 2 },\r\n  \"!=\": { minArity: 2 },\r\n  \"+\": { minArity: 2, numeric: true },\r\n  \"-\": { minArity: 1, numeric: true },\r\n  \"*\": { minArity: 2, numeric: true },\r\n  \"/\": { minArity: 2, numeric: true },\r\n  \"//\": { minArity: 2, numeric: true },\r\n  \"**\": { minArity: 1, maxArity: 2, numeric: true },\r\n  \"<\": { minArity: 2, numeric: true },\r\n  \">\": { minArity: 2, numeric: true },\r\n  \"<=\": { minArity: 2, numeric: true },\r\n  \">=\": { minArity: 2, numeric: true },\r\n  \"fast=\": { exactArity: 2 },\r\n  \"fast!=\": { exactArity: 2 },\r\n  \"fast+\": { exactArity: 2, numeric: true },\r\n  \"fast-\": { exactArity: 2, numeric: true },\r\n  \"fast*\": { exactArity: 2, numeric: true },\r\n  \"fast/\": { exactArity: 2, numeric: true },\r\n  \"fast//\": { exactArity: 2, numeric: true },\r\n  \"fast<\": { exactArity: 2, numeric: true },\r\n  \"fast>\": { exactArity: 2, numeric: true },\r\n  \"fast<=\": { exactArity: 2, numeric: true },\r\n  \"fast>=\": { exactArity: 2, numeric: true },\r\n  inc: { exactArity: 1, numeric: true },\r\n  dec: { exactArity: 1, numeric: true },\r\n  min: { minArity: 2, numeric: true },\r\n  max: { minArity: 2, numeric: true },\r\n  abs: { exactArity: 1, numeric: true },\r\n  sqrt: { exactArity: 1, numeric: true },\r\n  round: { minArity: 1, maxArity: 2, numeric: true },\r\n  floor: { exactArity: 1, numeric: true },\r\n  ceil: { exactArity: 1, numeric: true },\r\n  logn: { exactArity: 1, numeric: true },\r\n  log2: { exactArity: 1, numeric: true },\r\n  log10: { exactArity: 1, numeric: true },\r\n  and: { minArity: 1 },\r\n  or: { minArity: 1 },\r\n  xor: { exactArity: 2 },\r\n  \"&\": { exactArity: 2, numeric: true },\r\n  \"|\": { exactArity: 2, numeric: true },\r\n  \"^\": { exactArity: 2, numeric: true },\r\n  \"~\": { exactArity: 1, numeric: true },\r\n  \"<<\": { exactArity: 2, numeric: true },\r\n  \">>\": { exactArity: 2, numeric: true },\r\n  \">>>\": { exactArity: 2, numeric: true },\r\n  \"odd?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"even?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"pos?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"neg?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"zero?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"null?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"num?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"bool?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"str?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"vec?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"dict?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"key?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"func?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"wild?\": { exactArity: 1, returns: [\"bool\"] },\r\n  rem: { minArity: 2, numeric: true },\r\n  sin: { exactArity: 1, numeric: true },\r\n  cos: { exactArity: 1, numeric: true },\r\n  tan: { exactArity: 1, numeric: true },\r\n  vec: { returns: [\"vec\"] },\r\n  dict: { returns: [\"dict\"] },\r\n  len: { exactArity: 1, params: [[\"str\", \"vec\", \"dict\"]], returns: [\"num\"] },\r\n  \"to-num\": {\r\n    exactArity: 1,\r\n    params: [[\"str\", \"num\"]],\r\n    returns: [\"num\", \"null\"],\r\n  },\r\n  \"to-key\": { exactArity: 1, params: [[\"str\", \"num\"]], returns: [\"key\"] },\r\n  \"has?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  idx: { minArity: 2, maxArity: 3, params: [[\"str\", \"vec\"]], returns: [\"num\"] },\r\n  map: { minArity: 2, returns: [\"vec\"] },\r\n  for: { minArity: 2, returns: [\"vec\"] },\r\n  reduce: { minArity: 2, maxArity: 3 },\r\n  filter: {\r\n    minArity: 2,\r\n    params: [[], [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\", \"str\", \"dict\"],\r\n  },\r\n  remove: {\r\n    minArity: 2,\r\n    params: [[], [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\", \"str\", \"dict\"],\r\n  },\r\n  find: { minArity: 2, params: [[], [\"vec\", \"dict\", \"str\"]] },\r\n  count: {\r\n    minArity: 2,\r\n    params: [[], [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"num\"],\r\n  },\r\n  repeat: { minArity: 2, params: [[], \"num\"] },\r\n  \"->\": { minArity: 2 },\r\n  str: { returns: [\"str\"] },\r\n  rand: { maxArity: 2, numeric: true, returns: [\"num\"] },\r\n  \"rand-int\": { maxArity: 2, numeric: true, returns: [\"num\"] },\r\n  \".\": { minArity: 1 },\r\n  \"..\": { minArity: 2 },\r\n  \"...\": { minArity: 2 },\r\n  into: {\r\n    exactArity: 2,\r\n    params: [\r\n      [\"vec\", \"dict\"],\r\n      [\"vec\", \"dict\"],\r\n    ],\r\n    returns: [\"vec\", \"dict\"],\r\n  },\r\n  push: {\r\n    minArity: 2,\r\n    maxArity: 3,\r\n    params: [[\"vec\", \"dict\"]],\r\n    returns: [\"vec\", \"dict\"],\r\n  },\r\n  sect: {\r\n    minArity: 1,\r\n    maxArity: 3,\r\n    params: [[\"vec\", \"str\"], \"num\", \"num\"],\r\n    returns: [\"vec\", \"str\"],\r\n  },\r\n  reverse: { exactArity: 1, params: [[\"vec\", \"str\"]], returns: [\"vec\", \"str\"] },\r\n  sort: {\r\n    minArity: 1,\r\n    maxArity: 2,\r\n    params: [[\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\"],\r\n  },\r\n  keys: { exactArity: 1, params: [\"dict\"] },\r\n  vals: { exactArity: 1, params: [\"dict\"] },\r\n  do: { minArity: 1 },\r\n  val: { minArity: 1 },\r\n  range: { minArity: 1, maxArity: 3, numeric: \"in only\", returns: [\"vec\"] },\r\n  \"empty?\": {\r\n    exactArity: 1,\r\n    params: [[\"str\", \"vec\", \"dict\"]],\r\n    returns: [\"bool\"],\r\n  },\r\n  split: { minArity: 1, maxArity: 2, params: [\"str\", \"str\"], returns: [\"vec\"] },\r\n  join: {\r\n    exactArity: 2,\r\n    params: [\"str\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"str\"],\r\n  },\r\n  \"starts?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  \"ends?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  \"lower-case\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"upper-case\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  trim: { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"trim-start\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"trim-end\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"str*\": { exactArity: 2, params: [\"str\", \"num\"], returns: [\"str\"] },\r\n  \"char-code\": {\r\n    minArity: 1,\r\n    maxArity: 2,\r\n    params: [[\"str\", \"num\"], \"num\"],\r\n    returns: [\"str\", \"num\", \"null\"],\r\n  },\r\n  time: { exactArity: 0, returns: [\"num\"] },\r\n  version: { exactArity: 0, returns: [\"num\"] },\r\n  tests: { minArity: 0, maxArity: 1, params: [\"bool\"], returns: [\"str\"] },\r\n  symbols: { exactArity: 0, returns: [\"vec\"] },\r\n  eval: { exactArity: 1, params: [\"str\"] },\r\n  reset: { exactArity: 0 },\r\n  recur: {},\r\n};\r\n\r\nexport const typeNames = {\r\n  null: \"null\",\r\n  str: \"string\",\r\n  num: \"number\",\r\n  bool: \"boolean\",\r\n  key: \"keyword\",\r\n  ref: \"reference\",\r\n  vec: \"vector\",\r\n  dict: \"dictionary\",\r\n  func: \"function\",\r\n  clo: \"closure\",\r\n  wild: \"wildcard\",\r\n};\r\n\r\nexport const assertUnreachable = (_x: never): never => <never>0;\r\n","import { has, isArray, len } from \"./poly-fills\";\r\nimport { ErrCtx, InvokeError, ops, typeNames, Val } from \"./types\";\r\n\r\nexport const asBoo = (val: Val) =>\r\n  val.t === \"bool\" ? val.v : val.t !== \"null\";\r\n\r\nexport function arityCheck(op: string, nArg: number, errCtx: ErrCtx) {\r\n  const { exactArity, maxArity, minArity } = ops[op];\r\n  const aErr = (msg: string, amount: number) => [\r\n    <InvokeError>{\r\n      e: \"Arity\",\r\n      m: `${op} needs ${msg} argument${amount !== 1 ? \"s\" : \"\"}, not ${nArg}`,\r\n      errCtx,\r\n    },\r\n  ];\r\n  if (exactArity !== undefined) {\r\n    if (nArg !== exactArity) {\r\n      return aErr(`exactly ${exactArity}`, exactArity);\r\n    }\r\n  } else {\r\n    if (minArity && !maxArity && nArg < minArity) {\r\n      return aErr(`at least ${minArity}`, minArity);\r\n    } else if (!minArity && maxArity && nArg > maxArity) {\r\n      return aErr(`at most ${maxArity}`, maxArity);\r\n    } else if (minArity && maxArity && (nArg < minArity || nArg > maxArity)) {\r\n      return aErr(`between ${minArity} and ${maxArity}`, maxArity);\r\n    }\r\n  }\r\n}\r\n\r\nexport function typeCheck(\r\n  op: string,\r\n  args: Val[\"t\"][][],\r\n  errCtx: ErrCtx,\r\n  optimistic = false,\r\n): InvokeError[] | undefined {\r\n  const { params: types, numeric: onlyNum } = ops[op];\r\n  const nArg = len(args);\r\n  if (onlyNum) {\r\n    const nonNumArgIdx = args.findIndex(\r\n      a =>\r\n        !!len(a) && (optimistic ? !a.find(t => t === \"num\") : a[0] !== \"num\"),\r\n    );\r\n    if (nonNumArgIdx === -1) {\r\n      return;\r\n    }\r\n    const names = args[nonNumArgIdx]!.map(t => typeNames[t]).join(\", \");\r\n    return [\r\n      typeErr(`${op} takes numeric arguments only, not ${names}`, errCtx),\r\n    ];\r\n  }\r\n  if (!types) {\r\n    return;\r\n  }\r\n  const typeViolations = types\r\n    .map((need, i) => {\r\n      if (i >= nArg || !args[i]) {\r\n        return false;\r\n      }\r\n      const argTypes = args[i]!;\r\n      if (isArray(need)) {\r\n        if (\r\n          !len(need) ||\r\n          (optimistic\r\n            ? !len(argTypes) || argTypes.some(t => has(need, t))\r\n            : len(argTypes) === 1 && has(need, argTypes[0]))\r\n        ) {\r\n          return false;\r\n        }\r\n        const names = argTypes.map(t => typeNames[t]);\r\n        const needs = need.map(t => typeNames[t]).join(\", \");\r\n        return `argument ${i + 1} must be either: ${needs}, not ${names}`;\r\n      } else {\r\n        if (\r\n          optimistic\r\n            ? !len(argTypes) || has(argTypes, need)\r\n            : len(argTypes) === 1 && need === argTypes[0]\r\n        ) {\r\n          return false;\r\n        }\r\n        const names = argTypes.map(t => typeNames[t]);\r\n        return `argument ${i + 1} must be ${typeNames[need]}, not ${names}`;\r\n      }\r\n    })\r\n    .filter(r => !!r);\r\n  return len(typeViolations)\r\n    ? typeViolations.map(v => typeErr(<string>v, errCtx))\r\n    : undefined;\r\n}\r\n\r\nexport const typeErr = (m: string, errCtx: ErrCtx): InvokeError => ({\r\n  e: \"Type\",\r\n  m,\r\n  errCtx,\r\n});\r\n\r\nexport function numOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\r\n  const names = types.map(t => typeNames[t]).join(\", \");\r\n  return [\r\n    typeErr(\r\n      `number as operation argument must be string, vector, or dictionary, not ${names}`,\r\n      errCtx,\r\n    ),\r\n  ];\r\n}\r\n\r\nexport function keyOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\r\n  const names = types.map(t => typeNames[t]).join(\", \");\r\n  return [\r\n    typeErr(\r\n      `keyword as operation argument must be dictionary or vector, not ${names}`,\r\n      errCtx,\r\n    ),\r\n  ];\r\n}\r\n","import { arityCheck, keyOpErr, numOpErr, typeCheck } from \"./checks\";\r\nimport * as pf from \"./poly-fills\";\r\nconst { has, flat, push, slice, splice } = pf;\r\nconst { slen, starts, sub, substr, strIdx, subIdx } = pf;\r\nconst { isNum, len, toNum } = pf;\r\nimport { ParamsShape, ErrCtx, Func, Funcs, Ins, ops, Val } from \"./types\";\r\nimport { assertUnreachable, InvokeError } from \"./types\";\r\n\r\ntype Token = {\r\n  typ: \"str\" | \"num\" | \"sym\" | \"rem\" | \"(\" | \")\";\r\n  text: string;\r\n  errCtx: ErrCtx;\r\n};\r\ntype Node = Token | Node[];\r\ntype ParserIns = Ins | { typ: \"err\"; value: string; errCtx: ErrCtx };\r\nconst nullVal: Val = { t: \"null\", v: undefined };\r\nconst falseVal = <Val>{ t: \"bool\", v: false };\r\ntype NamedNodes = {\r\n  name: string;\r\n  nodes: Node[];\r\n};\r\nconst isToken = (node: Node | undefined): node is Token =>\r\n  !!node && \"errCtx\" in node;\r\nconst symAt = (node: Node, pos = 0) => {\r\n  if (isToken(node)) {\r\n    return \"\";\r\n  }\r\n  const arg = node[pos];\r\n  return (isToken(arg) && has([\"sym\", \"str\"], arg.typ) && arg.text) || \"\";\r\n};\r\nconst node2str = (nodes: Node[]): string =>\r\n  nodes.map(n => (isToken(n) ? n.text : `(${node2str(n)})`)).join(\" \");\r\n\r\nexport function tokenise(\r\n  code: string,\r\n  sourceId: string,\r\n  makeCollsOps = true,\r\n  emitComments = false,\r\n) {\r\n  const tokens: Token[] = [];\r\n  const isDigit = (ch: string) => sub(\"0123456789\", ch);\r\n  let [inString, line, col, inStringAt] = [false, 1, 0, [1, 0]];\r\n  let [inSymbol, inNumber, inHex] = [false, false, false];\r\n  for (let i = 0, l = slen(code); i < l; ++i) {\r\n    const c = strIdx(code, i),\r\n      nextCh = i + 1 !== l ? strIdx(code, i + 1) : \"\";\r\n    ++col;\r\n    if (c === \"\\\\\" && inString) {\r\n      tokens[len(tokens) - 1].text +=\r\n        { n: \"\\n\", t: \"\\t\", r: \"\\r\", '\"': '\"' }[nextCh] ||\r\n        (nextCh === \"\\\\\" ? \"\\\\\" : `\\\\${nextCh}`);\r\n      ++col;\r\n      ++i;\r\n      continue;\r\n    }\r\n    const errCtx: ErrCtx = { sourceId: sourceId, line, col };\r\n    if (c === '\"') {\r\n      if ((inString = !inString)) {\r\n        inStringAt = [line, col];\r\n        tokens.push({ typ: \"str\", text: \"\", errCtx });\r\n      }\r\n      inNumber = inSymbol = false;\r\n      continue;\r\n    }\r\n    const isWhite = sub(\" \\t\\n\\r,\", c);\r\n    if (!inString && isWhite) {\r\n      inNumber = inSymbol = false;\r\n      if (c === \"\\n\") {\r\n        ++line;\r\n        col = 0;\r\n      }\r\n      continue;\r\n    }\r\n    if (!inString && c === \";\") {\r\n      const nl = subIdx(substr(code, ++i), \"\\n\");\r\n      const text = substr(code, i, nl > 0 ? nl : l - i);\r\n      i += slen(text);\r\n      ++line;\r\n      col = 0;\r\n      if (emitComments) {\r\n        tokens.push({ typ: \"rem\", text, errCtx });\r\n      }\r\n      continue;\r\n    }\r\n    const isParen = sub(\"()[]{}\", c);\r\n    //Allow one . per number, or hex, or binary, else convert into symbol\r\n    if (inNumber && !isDigit(c)) {\r\n      const hexStart = c === \"x\" && tokens[len(tokens) - 1].text === \"0\";\r\n      inHex = inHex || hexStart;\r\n      inNumber =\r\n        (c === \"b\" && tokens[len(tokens) - 1].text === \"0\") ||\r\n        (c === \".\" && !sub(tokens[len(tokens) - 1].text, \".\")) ||\r\n        (inHex && (hexStart || sub(\"ABCDEFabcdef\", c)));\r\n      if (!inNumber && !isParen && !isWhite) {\r\n        inSymbol = true;\r\n        tokens[len(tokens) - 1].typ = \"sym\";\r\n      }\r\n    }\r\n    //Stop scanning symbol if a paren\r\n    if (inSymbol && isParen) {\r\n      inSymbol = false;\r\n    }\r\n    //If we just finished concatenating a token\r\n    if (!inString && !inSymbol && !inNumber) {\r\n      if (isParen) {\r\n        const text = subIdx(\"[{(\", c) === -1 ? \")\" : \"(\";\r\n        tokens.push({ typ: text, text: makeCollsOps ? text : c, errCtx });\r\n        if (makeCollsOps && (c === \"[\" || c === \"{\")) {\r\n          tokens.push({ typ: \"sym\", text: c === \"[\" ? \"vec\" : \"dict\", errCtx });\r\n        }\r\n        continue;\r\n      }\r\n      inNumber =\r\n        isDigit(c) ||\r\n        (c === \".\" && isDigit(nextCh)) ||\r\n        (c === \"-\" && (isDigit(nextCh) || nextCh === \".\"));\r\n      inHex = inSymbol = !inNumber;\r\n      const typ: Token[\"typ\"] = inSymbol ? \"sym\" : \"num\";\r\n      tokens.push({ typ, text: \"\", errCtx });\r\n    }\r\n    tokens[len(tokens) - 1].text += c;\r\n  }\r\n  return { tokens, stringError: inString ? inStringAt : undefined };\r\n}\r\n\r\n/** Parses tokens into a tree where each node is a token or token list. */\r\nfunction treeise(tokens: Token[]): Node[] {\r\n  const nodes: Node[] = [];\r\n  const _treeise = (tokens: Token[]): Node => {\r\n    let prefix: Token | undefined;\r\n    if (tokens[0].typ === \"sym\" && sub(\"@#\", tokens[0].text)) {\r\n      prefix = tokens.shift()!;\r\n    }\r\n    const token = tokens.shift()!;\r\n    if (token.typ !== \"(\" && token.typ !== \")\") {\r\n      return token;\r\n    }\r\n    const nodes: Node[] = prefix ? [prefix] : [];\r\n    while (tokens[0].typ !== \")\") {\r\n      nodes.push(_treeise(tokens));\r\n    }\r\n    tokens.shift();\r\n    return nodes;\r\n  };\r\n  while (len(tokens)) {\r\n    nodes.push(_treeise(tokens));\r\n  }\r\n  return nodes;\r\n}\r\n\r\n/** Separates function nodes and non-function nodes,\r\n * with non-function nodes collected into (function entry ...)\r\n * if there are any.*/\r\nfunction collectFuncs(\r\n  nodes: Node[],\r\n): ({ name: string; nodes: Node[] } | { err: string; errCtx: ErrCtx })[] {\r\n  const funcs: ReturnType<typeof collectFuncs> = [];\r\n  const entries: Node[] = [];\r\n  nodes.forEach(node => {\r\n    if (!isToken(node) && isToken(node[0]) && symAt(node) === \"function\") {\r\n      const name = symAt(node, 1);\r\n      if (!name) {\r\n        funcs.push({ err: \"nameless function\", errCtx: node[0].errCtx });\r\n      } else if (len(node) < 3) {\r\n        funcs.push({ err: \"empty function body\", errCtx: node[0].errCtx });\r\n      }\r\n      funcs.push({ name, nodes: node.slice(2) });\r\n    } else {\r\n      entries.push(node);\r\n    }\r\n  });\r\n  if (len(entries)) {\r\n    funcs.push({ name: \"entry\", nodes: entries });\r\n  }\r\n  return funcs;\r\n}\r\n\r\nconst parseNode = (node: Node, params: ParamsShape) =>\r\n  isToken(node) ? parseArg(node, params) : parseForm(node, params);\r\n\r\nfunction parseForm(\r\n  nodes: Node[],\r\n  params: ParamsShape,\r\n  doArityCheck = true,\r\n): ParserIns[] {\r\n  if (!len(nodes)) {\r\n    return [];\r\n  }\r\n  const nodeParser = (node: Node) => parseNode(node, params);\r\n  let firstNode = nodes.shift()!;\r\n  let head = nodeParser(firstNode);\r\n  const { errCtx } = head[0];\r\n  if (isToken(firstNode) && firstNode.typ === \"sym\") {\r\n    if (firstNode.text in ops) {\r\n      const { exactArity, minArity } = ops[firstNode.text];\r\n      const a = exactArity ?? minArity;\r\n      if (a && a !== 1 && len(nodes) + 1 === a) {\r\n        nodes.unshift(firstNode);\r\n        firstNode = { typ: \"sym\", text: \"@\", errCtx: firstNode.errCtx };\r\n      }\r\n    }\r\n    const { text: op, errCtx } = firstNode;\r\n    const err = (m: string, eCtx = errCtx) => [\r\n      <ParserIns>{ typ: \"err\", value: m, errCtx: eCtx },\r\n    ];\r\n\r\n    if (has([\"if\", \"if!\", \"when\", \"match\"], op) && !len(nodes)) {\r\n      return err(\"provide a condition\");\r\n    } else if (has([\"if\", \"if!\"], op)) {\r\n      if (len(nodes) === 1) {\r\n        return err(\"provide at least one branch\");\r\n      } else if (len(nodes) > 3) {\r\n        return err(\"provide fewer than two branches\");\r\n      }\r\n      let [cond, branch1, branch2] = nodes.map(nodeParser);\r\n      const ifN = op === \"if!\" && [\r\n        <Ins>{ typ: \"val\", value: { t: \"func\", v: \"!\" }, errCtx },\r\n        <Ins>{ typ: \"exe\", value: 1, errCtx },\r\n      ];\r\n      if (!branch2) {\r\n        branch2 = [{ typ: \"val\", value: nullVal, errCtx }];\r\n      }\r\n      return [\r\n        ...cond,\r\n        ...(ifN || []),\r\n        { typ: \"if\", value: len(branch1) + 1, errCtx },\r\n        ...branch1,\r\n        { typ: \"jmp\", value: len(branch2), errCtx },\r\n        ...branch2,\r\n      ];\r\n    } else if (op === \"when\") {\r\n      if (len(nodes) === 1) {\r\n        return err(\"provide a body\");\r\n      }\r\n      const [cond, ...body] = nodes.map(nodeParser);\r\n      const bodyIns = flat(body);\r\n      return [\r\n        ...cond,\r\n        { typ: \"if\", value: len(bodyIns) + 1, errCtx },\r\n        ...bodyIns,\r\n        { typ: \"jmp\", value: 1, errCtx },\r\n        { typ: \"val\", value: nullVal, errCtx },\r\n      ];\r\n    } else if (op === \"match\") {\r\n      const [cond, ...args] = nodes.map(nodeParser);\r\n      const otherwise: ParserIns[] = len(args) % 2 ? args.pop()! : [];\r\n      if (!len(args)) {\r\n        return err(\"provide at least one case\");\r\n      }\r\n      const elseLen = len(otherwise);\r\n      let insCount =\r\n        args.reduce((acc, a) => acc + len(a), 0) +\r\n        (elseLen ? elseLen : 2) +\r\n        len(args);\r\n      const ins: ParserIns[] = cond;\r\n      while (len(args) > 1) {\r\n        const [a, when] = [args.shift()!, args.shift()!];\r\n        push(ins, a);\r\n        ins.push({ typ: \"mat\", value: len(when) + 1, errCtx });\r\n        push(ins, when);\r\n        insCount -= len(a) + len(when) + 2;\r\n        ins.push({ typ: \"jmp\", value: insCount, errCtx });\r\n      }\r\n      if (len(otherwise)) {\r\n        push(ins, otherwise);\r\n      } else {\r\n        ins.push({ typ: \"pop\", value: 1, errCtx });\r\n        ins.push({ typ: \"val\", value: falseVal, errCtx });\r\n      }\r\n      return ins;\r\n    } else if (op === \"catch\") {\r\n      if (len(nodes) < 2) {\r\n        return err(\"provide at least 2 arguments\");\r\n      } else if (isToken(nodes[0])) {\r\n        return err(\"argument 1 must be expression\");\r\n      }\r\n      const body = nodeParser(nodes[0]);\r\n      const when = flat(nodes.slice(1).map(nodeParser));\r\n      return [...body, { typ: \"cat\", value: len(when), errCtx }, ...when];\r\n    } else if (op === \"and\" || op === \"or\" || op === \"while\") {\r\n      const args = nodes.map(nodeParser);\r\n      let insCount = args.reduce((acc, a) => acc + len(a), 0);\r\n      if (len(args) < 2) {\r\n        return err(\"provide at least 2 arguments\");\r\n      }\r\n      const ins: ParserIns[] = [];\r\n      if (op === \"while\") {\r\n        ins.push({ typ: \"val\", value: nullVal, errCtx }); //If first is false\r\n        insCount += 2; //+1 for the if ins, +1 for the pop ins\r\n        const [head, ...body] = args;\r\n        push(ins, head);\r\n        ins.push({ typ: \"if\", value: insCount - len(head), errCtx });\r\n        ins.push({ typ: \"pop\", value: len(body), errCtx });\r\n        push(ins, flat(body));\r\n        ins.push({ typ: \"loo\", value: -(insCount + 1), errCtx });\r\n        return ins;\r\n      }\r\n      insCount += len(args); //+1 for each if/or ins\r\n      insCount += toNum(op === \"and\");\r\n      const typ = op === \"and\" ? \"if\" : \"or\";\r\n      for (let a = 0; a < len(args); ++a) {\r\n        push(ins, args[a]);\r\n        insCount -= len(args[a]);\r\n        ins.push({ typ, value: insCount, errCtx });\r\n        --insCount;\r\n      }\r\n      if (op === \"and\") {\r\n        push(ins, [\r\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: true }, errCtx },\r\n          { typ: \"jmp\", value: 1, errCtx },\r\n        ]);\r\n      }\r\n      ins.push({ typ: \"val\", value: falseVal, errCtx });\r\n      return ins;\r\n    } else if (op === \"var\" || op === \"let\") {\r\n      const defs = nodes.filter((n, i) => !(i % 2));\r\n      const vals = nodes.filter((n, i) => i % 2);\r\n      if (!len(defs)) {\r\n        return err(\"provide at least 1 declaration name and value\");\r\n      } else if (len(defs) > len(vals)) {\r\n        return err(\"provide a value after each declaration name\");\r\n      }\r\n      const ins: ParserIns[] = [];\r\n      for (let d = 0, lim = len(defs); d < lim; ++d) {\r\n        push(ins, nodeParser(vals[d]));\r\n        const def = defs[d];\r\n        if (isToken(def)) {\r\n          const defIns = parseNode(defs[d], params);\r\n          if (len(defIns) > 1 || defIns[0].typ !== \"ref\") {\r\n            return err(\"declaration name must be symbol\", defIns[0].errCtx);\r\n          }\r\n          ins.push({ typ: op, value: defIns[0].value, errCtx });\r\n        } else {\r\n          const { shape, errors } = parseParams([def], true);\r\n          if (len(errors)) {\r\n            return errors;\r\n          }\r\n          const typ = op === \"var\" ? \"dva\" : \"dle\";\r\n          ins.push({ typ, value: shape, errCtx });\r\n        }\r\n      }\r\n      return ins;\r\n    } else if (op === \"var!\" || op === \"let!\") {\r\n      //Rewrite e.g. (var! a + 1) -> (var a (+ a 1))\r\n      if (len(nodes) < 2) {\r\n        return err(\"provide 1 declaration name and 1 function\");\r\n      }\r\n      const [[def], func, ...args] = nodes.map(nodeParser);\r\n      if (def.typ !== \"ref\") {\r\n        return err(\"declaration name must be symbol\", def.errCtx);\r\n      }\r\n      const ins: Ins[] = [{ typ: \"ref\", value: def.value, errCtx }];\r\n      push(ins, [...flat(args), ...func]);\r\n      ins.push({ typ: \"exe\", value: len(args) + 1, errCtx });\r\n      const typ = op === \"var!\" ? \"var\" : \"let\";\r\n      ins.push({ typ, value: def.value, errCtx });\r\n      return ins;\r\n    } else if (op === \"#\" || op === \"@\" || op === \"fn\") {\r\n      const ins: ParserIns[] = [];\r\n      let asStr = node2str(nodes);\r\n      asStr = op === \"fn\" ? `(fn ${asStr})` : `${op}(${asStr})`;\r\n      if (op === \"fn\") {\r\n        const parsedParams = parseParams(nodes, false);\r\n        params = parsedParams.shape;\r\n        push(ins, parsedParams.errors);\r\n        if (!len(nodes)) {\r\n          return err(\"provide a body\");\r\n        }\r\n        nodes.unshift({ typ: \"sym\", text: \"do\", errCtx });\r\n      }\r\n      //Rewrite partial closure to #(... [body] args)\r\n      if (op === \"@\") {\r\n        nodes = [\r\n          { typ: \"sym\", text: \"...\", errCtx },\r\n          ...nodes,\r\n          { typ: \"sym\", text: \"args\", errCtx },\r\n        ];\r\n      }\r\n      push(ins, parseForm(nodes, params, op !== \"@\"));\r\n      const errors = ins.filter(t => t.typ === \"err\");\r\n      if (len(errors)) {\r\n        return errors;\r\n      }\r\n      if (op === \"fn\") {\r\n        ins.forEach(i => {\r\n          if (i.typ === \"npa\") {\r\n            i.typ = \"upa\";\r\n          }\r\n        });\r\n      }\r\n      const value: [string, Ins[]] = [asStr, <Ins[]>ins];\r\n      return [{ typ: op === \"@\" ? \"par\" : \"clo\", value, errCtx }];\r\n    }\r\n\r\n    //Operation arity check, optionally disabled for partial closures\r\n    if (ops[op] && doArityCheck) {\r\n      const errors = arityCheck(op, len(nodes), errCtx);\r\n      const err = (value: string, eCtx = errCtx) => [\r\n        <ParserIns>{ typ: \"err\", value, errCtx: eCtx },\r\n      ];\r\n      push(head, errors?.map(e => err(e.m)[0]) ?? []);\r\n      if (!errors) {\r\n        //Upgrade some math and logic functions to their faster counterparts\r\n        if (len(nodes) === 2 && ops[`fast${op}`]) {\r\n          head = nodeParser({ typ: \"sym\", text: `fast${op}`, errCtx });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const args = nodes.map(nodeParser);\r\n  const ins: ParserIns[] = flat(args);\r\n  if (symAt([firstNode]) === \"return\") {\r\n    return [...ins, { typ: \"ret\", value: !!len(args), errCtx }];\r\n  } else if (head[0].typ === \"ref\") {\r\n    const { value: v, errCtx } = head[0];\r\n    head[0] = { typ: \"val\", value: { t: \"str\", v }, errCtx };\r\n  }\r\n  push(ins, head);\r\n  const typ = len(head) > 1 ? \"exa\" : \"exe\";\r\n  return [...ins, { typ, value: len(args), errCtx }];\r\n}\r\n\r\nfunction parseArg(node: Node, params: ParamsShape): ParserIns[] {\r\n  if (isToken(node)) {\r\n    const { errCtx } = node;\r\n    if (node.typ === \"str\") {\r\n      return [{ typ: \"val\", value: { t: \"str\", v: node.text }, errCtx }];\r\n    } else if (node.typ === \"num\") {\r\n      return [{ typ: \"val\", value: { t: \"num\", v: toNum(node.text) }, errCtx }];\r\n    } else if (node.typ === \"sym\") {\r\n      const { text } = node;\r\n      const paramNames = params.map(({ name }) => name);\r\n      if (text === \"true\" || text === \"false\") {\r\n        return [\r\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: text === \"true\" }, errCtx },\r\n        ];\r\n      } else if (text === \"null\") {\r\n        return [{ typ: \"val\", value: nullVal, errCtx }];\r\n      } else if (text === \"_\") {\r\n        return [{ typ: \"val\", value: { t: \"wild\", v: undefined }, errCtx }];\r\n      } else if (starts(text, \":\")) {\r\n        return [{ typ: \"val\", value: <Val>{ t: \"key\", v: text }, errCtx }];\r\n      } else if (starts(text, \"%\") && isNum(substr(text, 1))) {\r\n        const value = toNum(substr(text, 1));\r\n        if (value < 0) {\r\n          return [{ typ: \"val\", value: nullVal, errCtx }];\r\n        }\r\n        return [{ typ: \"upa\", value, errCtx }];\r\n      } else if (has(paramNames, text)) {\r\n        const param = params.find(({ name }) => name === text)!;\r\n        if (len(param.position) === 1) {\r\n          return [{ typ: \"npa\", value: param.position[0], errCtx }];\r\n        }\r\n        return [{ typ: \"dpa\", value: param.position, errCtx }];\r\n      } else if (text === \"args\") {\r\n        return [{ typ: \"upa\", value: -1, errCtx }];\r\n      } else if (text === \"PI\" || text === \"E\") {\r\n        const v = text === \"PI\" ? 3.141592653589793 : 2.718281828459045;\r\n        return [{ typ: \"val\", value: { t: \"num\", v }, errCtx }];\r\n      } else if (ops[text]) {\r\n        return [{ typ: \"val\", value: <Val>{ t: \"func\", v: text }, errCtx }];\r\n      }\r\n      return [{ typ: \"ref\", value: text, errCtx }];\r\n    }\r\n    return [];\r\n  } else if (!len(node)) {\r\n    return [];\r\n  }\r\n  return parseForm(node, params);\r\n}\r\n\r\n/** Consumes some tokens and returns ParamsShape.\r\n * Example inputs:\r\n * \"(fn \"   a [b [c]] d [d c b a]\r\n * \"(var \" [a] [1 2] b [1 2]\r\n * \"(function \" [x] (print x) x\r\n * \"(function \" x [x]\r\n * \"(fn \"\r\n * \"(function \"\r\n * */\r\nfunction parseParams(\r\n  nodes: Node[],\r\n  consumeLast: boolean,\r\n  position: number[] = [],\r\n): { shape: ParamsShape; errors: ParserIns[] } {\r\n  const shape: ParamsShape = [],\r\n    errs: ParserIns[] = [];\r\n  let n = 0;\r\n  while (\r\n    len(nodes) > (consumeLast ? 0 : 1) &&\r\n    (isToken(nodes[0]) || symAt(nodes[0]) === \"vec\")\r\n  ) {\r\n    const param = nodes.shift()!;\r\n    if (!isToken(param)) {\r\n      param.shift();\r\n      const parsed = parseParams(param, true, [...position, n]);\r\n      push(shape, parsed.shape);\r\n      push(errs, parsed.errors);\r\n    } else {\r\n      const { typ, errCtx } = param;\r\n      if (typ === \"sym\") {\r\n        shape.push({ name: param.text, position: [...position, n] });\r\n      } else {\r\n        errs.push({ typ: \"err\", value: \"provide parameter name\", errCtx });\r\n      }\r\n    }\r\n    ++n;\r\n  }\r\n  return { shape, errors: errs };\r\n}\r\n\r\nfunction compileFunc({ name, nodes: nodes }: NamedNodes): Func | InvokeError {\r\n  const { shape: params, errors } = parseParams(nodes, false);\r\n  const ins = [...errors, ...flat(nodes.map(node => parseArg(node, params)))];\r\n  for (let i = 0, lim = len(ins); i < lim; i++) {\r\n    const { typ, value, errCtx } = ins[i];\r\n    if (typ === \"err\") {\r\n      return <InvokeError>{ e: \"Parse\", m: value, errCtx };\r\n    }\r\n  }\r\n  return { name, ins: <Ins[]>ins };\r\n}\r\n\r\nfunction findParenImbalance(\r\n  tokens: Token[],\r\n  numL: number,\r\n  numR: number,\r\n): [number, number] {\r\n  //Scan for first instance of untimely closed\r\n  //  or last instance of unclosed open\r\n  const untimely = numR >= numL;\r\n  const [l, r] = [untimely ? \"(\" : \")\", untimely ? \")\" : \"(\"];\r\n  const direction = untimely ? 1 : -1;\r\n  for (\r\n    let lim = len(tokens), t = untimely ? 0 : lim - 1, depth = 0;\r\n    untimely ? t < lim : t >= 0;\r\n    t += direction\r\n  ) {\r\n    const {\r\n      typ,\r\n      errCtx: { line, col },\r\n    } = tokens[t];\r\n    depth += toNum(typ === l) - toNum(typ === r);\r\n    if (depth < 0) {\r\n      return [line, col];\r\n    }\r\n  }\r\n  return [0, 0];\r\n}\r\n\r\nfunction tokenErrorDetect(stringError: number[] | undefined, tokens: Token[]) {\r\n  const sourceId = len(tokens) ? tokens[0].errCtx.sourceId : \"\";\r\n  const errors: InvokeError[] = [];\r\n  const err = (m: string, errCtx: ErrCtx) =>\r\n    errors.push({ e: \"Parse\", m, errCtx });\r\n\r\n  //Check for double-quote imbalance\r\n  if (stringError) {\r\n    const [line, col] = stringError;\r\n    err(\"unmatched double quotation marks\", { sourceId: sourceId, line, col });\r\n    return errors;\r\n  }\r\n\r\n  //Check for paren imbalance\r\n  const countTyp = (t: Token[\"typ\"]) =>\r\n    len(tokens.filter(({ typ }) => typ === t));\r\n  const [numL, numR] = [countTyp(\"(\"), countTyp(\")\")];\r\n  {\r\n    const [line, col] = findParenImbalance(tokens, numL, numR);\r\n    if (line + col) {\r\n      err(\"unmatched parenthesis\", { sourceId: sourceId, line, col });\r\n    }\r\n  }\r\n\r\n  //Check for any empty expressions\r\n  let emptyHead: Token | undefined;\r\n  for (let t = 0, lastWasL = false; t < len(tokens); ++t) {\r\n    if (lastWasL && tokens[t].typ === \")\") {\r\n      emptyHead = tokens[t];\r\n      break;\r\n    }\r\n    lastWasL = tokens[t].typ === \"(\";\r\n  }\r\n  if (emptyHead) {\r\n    err(\"empty expression forbidden\", emptyHead.errCtx);\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\n//TODO: investigate Node implementation replacement\r\nfunction insErrorDetect(fins: Ins[]): InvokeError[] | undefined {\r\n  type TypeInfo = {\r\n    types?: Val[\"t\"][];\r\n    val?: Val;\r\n  };\r\n  const stack: TypeInfo[] = [];\r\n  for (let i = 0, lim = len(fins); i < lim; ++i) {\r\n    const ins = fins[i];\r\n    switch (ins.typ) {\r\n      case \"val\":\r\n        stack.push({ types: [ins.value.t], val: ins.value });\r\n        break;\r\n      case \"exa\":\r\n      case \"exe\": {\r\n        const head = stack.pop()!;\r\n        const args = splice(stack, len(stack) - ins.value, ins.value);\r\n        const badMatch = (okTypes: Val[\"t\"][]) =>\r\n          args.findIndex(\r\n            ({ types }) => types && !okTypes.find(t => has(types, t)),\r\n          );\r\n        const headIs = (t: Val[\"t\"]) =>\r\n          head.val\r\n            ? head.val.t === t\r\n            : head.types && len(head.types) === 1 && head.types[0] === t;\r\n        if (head.val && head.val.t === \"func\") {\r\n          if (head.val.v === \"recur\") {\r\n            splice(stack, len(stack) - ins.value, ins.value);\r\n            break;\r\n          }\r\n          const errors = typeCheck(\r\n            head.val.v,\r\n            args.map(a => a.types ?? []),\r\n            ins.errCtx,\r\n            true,\r\n          );\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const { returns, numeric: onlyNum } = ops[head.val.v];\r\n          stack.push(\r\n            onlyNum && onlyNum !== \"in only\"\r\n              ? { types: [\"num\"] }\r\n              : { types: returns },\r\n          );\r\n        } else if (headIs(\"num\")) {\r\n          const badArg = badMatch([\"str\", \"dict\", \"vec\"]);\r\n          if (badArg !== -1) {\r\n            return numOpErr(ins.errCtx, args[badArg].types!);\r\n          }\r\n          stack.push({});\r\n        } else if (headIs(\"key\")) {\r\n          const badArg = badMatch([\"dict\", \"vec\"]);\r\n          if (badArg !== -1) {\r\n            return keyOpErr(ins.errCtx, args[badArg].types!);\r\n          }\r\n          stack.push({});\r\n        } else if (headIs(\"str\") || headIs(\"bool\")) {\r\n          stack.push({});\r\n        } else if (!head.types && !head.val) {\r\n          stack.push({});\r\n        }\r\n        break;\r\n      }\r\n      case \"or\":\r\n        stack.pop();\r\n        stack.push({});\r\n        i += ins.value;\r\n        break;\r\n      case \"cat\":\r\n      case \"var\":\r\n      case \"let\":\r\n      case \"dva\":\r\n      case \"dle\":\r\n      case \"loo\":\r\n      case \"jmp\":\r\n        break;\r\n      case \"clo\":\r\n      case \"par\": {\r\n        const errors = insErrorDetect(ins.value[1]);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n      }\r\n      case \"ref\":\r\n      case \"npa\":\r\n      case \"upa\":\r\n      case \"dpa\":\r\n        stack.push({});\r\n        break;\r\n      case \"if\": {\r\n        stack.pop();\r\n        stack.push({});\r\n        const ifIns = slice(fins, i + 1, ins.value + 1);\r\n        const errors = insErrorDetect(ifIns);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        i += ins.value - 1;\r\n        break;\r\n      }\r\n      case \"mat\": {\r\n        stack.pop(); //first match\r\n        stack.pop(); //cond\r\n        i += ins.value;\r\n        i += fins[i].value as number; //The first jmp\r\n        stack.push({});\r\n        break;\r\n      }\r\n      case \"pop\":\r\n        splice(stack, len(stack) - ins.value, ins.value);\r\n        break;\r\n      case \"ret\":\r\n        if (ins.value) {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      default:\r\n        assertUnreachable(ins);\r\n    }\r\n  }\r\n}\r\n\r\nexport function parse(\r\n  code: string,\r\n  sourceId: string,\r\n): { funcs: Funcs; errors: InvokeError[] } {\r\n  const { tokens, stringError } = tokenise(code, sourceId);\r\n  const tokenErrors = tokenErrorDetect(stringError, tokens);\r\n  if (len(tokenErrors)) {\r\n    return { errors: tokenErrors, funcs: {} };\r\n  }\r\n  const okFuncs: Func[] = [],\r\n    errors: InvokeError[] = [];\r\n  const tree = treeise(tokens.slice());\r\n  const collected = collectFuncs(tree);\r\n  const namedNodes: NamedNodes[] = [];\r\n  collected.forEach(nodeOrErr => {\r\n    if (\"err\" in nodeOrErr) {\r\n      errors.push({ e: \"Parse\", m: nodeOrErr.err, errCtx: nodeOrErr.errCtx });\r\n    } else {\r\n      namedNodes.push({ name: nodeOrErr.name, nodes: nodeOrErr.nodes });\r\n    }\r\n  });\r\n  namedNodes.map(compileFunc).forEach(fae => {\r\n    if (\"e\" in fae) {\r\n      errors.push(fae);\r\n    } else {\r\n      okFuncs.push(fae);\r\n    }\r\n  });\r\n  push(errors, flat(okFuncs.map(f => insErrorDetect(f.ins) ?? [])));\r\n  const funcs: Funcs = {};\r\n  okFuncs.forEach(func => (funcs[func.name] = func));\r\n  return { errors, funcs };\r\n}\r\n","import { concat, getTimeMs, len, padEnd, trim } from \"./poly-fills\";\r\nimport { Ctx, Env, Val, ValOrErr, InvokeResult } from \"./types\";\r\n\r\ntype State = { dict: Map<string, Val>; output: string };\r\n\r\nfunction get(state: State, key: string): ValOrErr {\r\n  if (!state.dict.has(key)) {\r\n    return { kind: \"err\", err: `\"${key}\" not found.` };\r\n  }\r\n  return { kind: \"val\", value: state.dict.get(key)! };\r\n}\r\n\r\nfunction set(state: State, key: string, val: Val): string | undefined {\r\n  state.dict.set(key, val);\r\n  return undefined;\r\n}\r\n\r\nfunction exe(state: State, name: string, args: Val[]): ValOrErr {\r\n  const nullVal: Val = { t: \"null\", v: undefined };\r\n  switch (name) {\r\n    case \"test.function\":\r\n      state.output += args[0].v + \"\\n\";\r\n      break;\r\n    default:\r\n      return { kind: \"err\", err: `operation ${name} does not exist` };\r\n  }\r\n  return { kind: \"val\", value: nullVal };\r\n}\r\n\r\nconst tests: {\r\n  name: string;\r\n  code: string;\r\n  err?: string[];\r\n  out?: string;\r\n}[] = [\r\n  //Basic snippets\r\n  { name: \"Hello, world!\", code: `\"Hello, world!\"`, out: `Hello, world!` },\r\n  {\r\n    name: \"Say Hello, world!\",\r\n    code: `(print \"Hello, world!\")`,\r\n    out: `Hello, world!\\nnull`,\r\n  },\r\n  { name: \"1 + 1 = 2\", code: `(+ 1 1)`, out: `2` },\r\n  { name: \"Negate 1 = -1\", code: `(- 1)`, out: `-1` },\r\n  { name: \"(1+1)+1+(1+1) = 5\", code: `(+ (+ 1 1) 1 (+ 1 1))`, out: `5` },\r\n  { name: \"Conditional head\", code: `((if true + -) 12 9 1)`, out: `22` },\r\n  {\r\n    name: \"Whens\",\r\n    code: `[(when 123 (print \"hi\") 234) (when false (print \"bye\"))]`,\r\n    out: `hi\\n[234 null]`,\r\n  },\r\n  {\r\n    name: \"match and wildcard\",\r\n    code: `(match [1 2]\r\n             [0 0] (print \"hello\")\r\n             [0 2] (print \"bye\")\r\n             [1 _] \"hey\")`,\r\n    out: `hey`,\r\n  },\r\n  { name: \"Cond number head\", code: `((if false 1 2) [:a :b :c])`, out: `:c` },\r\n  {\r\n    name: \"and & short-circuit\",\r\n    code: `[(and true (if true null 1) (print \"hi\")) (and 1 2 3)]`,\r\n    out: `[false true]`,\r\n  },\r\n  {\r\n    name: \"or & short-circuit\",\r\n    code: `[(or true (print \"hi\") 1) (or false (print-str \"-> \") 1)]`,\r\n    out: `-> [true 1]`,\r\n  },\r\n  { name: \"String retrieve\", code: `(2 \"Hello\")`, out: `l` },\r\n  { name: \"Vector retrieve\", code: `(2 [:a :b :c :d])`, out: `:c` },\r\n  {\r\n    name: \"Key as operation\",\r\n    code: `[(:age {:name \"Patrick\" :age 24}) (:abc [:a :abc :c])]`,\r\n    out: `[24 :abc]`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 1\",\r\n    code: `({\"name\" \"Patrick\" \"age\" 24} \"age\")`,\r\n    out: `24`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 2\",\r\n    code: `({\"name\" \"Patrick\"} \"age\" 24)`,\r\n    out: `{\"name\" \"Patrick\", \"age\" 24}`,\r\n  },\r\n  {\r\n    name: \"Equalities\",\r\n    code: `[(= 1 2 1)\r\n            (!= 1 2 1)\r\n            (= \"Hello\" \"hello\")\r\n            (!= \"world\" \"world\")\r\n            (= [0 [1]] [0 [1]])]`,\r\n    out: `[false 1 false false [0 [1]]]`,\r\n  },\r\n  { name: \"Define and retrieve\", code: `(var a 1) a`, out: `1` },\r\n  { name: \"Define and add\", code: `(var a 1) (inc a)`, out: `2` },\r\n  { name: \"Define op and call\", code: `(var f +) (f 2 2)`, out: `4` },\r\n  { name: \"Define vec and call\", code: `(var f [1]) (f 1)`, out: `1` },\r\n  {\r\n    name: \"Define num and call\",\r\n    code: `(var f 1) (f [:a :b :c])`,\r\n    out: `:b`,\r\n  },\r\n  { name: \"Apply op to var\", code: `(var a 10) (var! a + 10)`, out: `20` },\r\n  {\r\n    name: \"Apply op to let\",\r\n    code: `(let a 10) (let! a (if true + -) (+ 2 3) 5)`,\r\n    out: `20`,\r\n  },\r\n  { name: \"Print simple vector\", code: `[1 2 3]`, out: `[1 2 3]` },\r\n  { name: \"Boolean select\", code: `[(true 1 2) (false 1)]`, out: `[1 null]` },\r\n  {\r\n    name: \"Sum vector of numbers\",\r\n    code: `[(reduce + [1 2 3]) (reduce + 3 [1 2 3])]`,\r\n    out: `[6 9]`,\r\n  },\r\n  {\r\n    name: \"Sum vectors of numbers\",\r\n    code: `(map + [1 2 3] [1 2 3 4])`,\r\n    out: `[2 4 6]`,\r\n  },\r\n  {\r\n    name: \"Filter by integer\",\r\n    code: `(filter 2 [[1] [:a :b :c] \"hello\" \"hi\"])`,\r\n    out: `[[:a :b :c] \"hello\"]`,\r\n  },\r\n  {\r\n    name: \"Comments, short decimal\",\r\n    code: `;((print \"Hello\")\r\n           .456`,\r\n    out: `0.456`,\r\n  },\r\n  {\r\n    name: \"Dictionary into vector\",\r\n    code: `(into [1 2] {3 4 5 6})`,\r\n    out: `[1 2 [3 4] [5 6]]`,\r\n  },\r\n  {\r\n    name: \"Vector into dictionary\",\r\n    code: `(into {[0] 1 [2] 3} [[0] 2])`,\r\n    out: `{[0] 2, [2] 3}`,\r\n  },\r\n  {\r\n    name: \"While loop\",\r\n    code: `(var n 5)\r\n           (while (< 0 n)\r\n             (print-str n)\r\n             (var n (dec n)))`,\r\n    out: `543210`,\r\n  },\r\n  {\r\n    name: \"Catch error\",\r\n    code: `(catch\r\n             (:e (catch (do (let a :a) (+ 1 a)) (0 errors)))\r\n             (print \"hi\"))`,\r\n    out: `Type`,\r\n  },\r\n  //Basic functions and closures\r\n  { name: \"Define with no call\", code: `(function func (print \"Nothing.\"))` },\r\n  {\r\n    name: \"Call greet func\",\r\n    code: `(function greeting (print \"Hello!\")) (greeting)`,\r\n    out: `Hello!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call const value func\",\r\n    code: `(function const 123) (const)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Call identity funcs\",\r\n    code: `(function id1 %)\r\n           (function id2 x x)\r\n           [(id1 123) (id2 456)]`,\r\n    out: `[123 456]`,\r\n  },\r\n  {\r\n    name: \"Call greet with name\",\r\n    code: `(function greeting name (print \"Hello, \" name \"!\"))\r\n           (greeting \"Patrick\")`,\r\n    out: `Hello, Patrick!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call with too few args\",\r\n    code: `(function func a b c [a b c]) (func 1 2)`,\r\n    out: `[1 2 null]`,\r\n  },\r\n  {\r\n    name: \"Define func and call\",\r\n    code: `(function func a b (+ a b)) (var f func) (f 2 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Anonymous parameters\",\r\n    code: `(function avg<n? (< (/ (.. + %) (len %)) %1))\r\n           (avg<n? [0 10 20 30 40] 5)`,\r\n    out: `false`,\r\n  },\r\n  {\r\n    name: \"Call parameter\",\r\n    code: `(function f x (x \"hello\")) (f print)`,\r\n    out: `hello\\nnull`,\r\n  },\r\n  { name: \"Let and retrieve\", code: `(function f (let a 1) a) (f)`, out: `1` },\r\n  {\r\n    name: \"Let num op and call\",\r\n    code: `(function f (let n 0) (n [1])) (f)`,\r\n    out: `1`,\r\n  },\r\n  {\r\n    name: \"Explicit return\",\r\n    code: `(function f (return 123) (print 456)) (f)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Closure 1\",\r\n    code: `(let x 10)\r\n           (let closure #(+ x x))\r\n           (let x 11)\r\n           (closure)`,\r\n    out: `20`,\r\n  },\r\n  {\r\n    name: \"Closure 2\",\r\n    code: `(filter #(or (.. = args) (even? %)) (range 10) 5)`,\r\n    out: `[0 2 4 5 6 8]`,\r\n  },\r\n  {\r\n    name: \"Closure 3\",\r\n    code: `(function f #(+ x x))\r\n           (var x 10) (let c20 (f))\r\n           (var x 20) (let c40 (f))\r\n           [(c20) (c40)]`,\r\n    out: `[20 40]`,\r\n  },\r\n  {\r\n    name: \"Func returns closure\",\r\n    code: `(function f x #(x 2 2))\r\n           (let closure (f +))\r\n           (closure)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Dictionary closure\",\r\n    code: `(function f x #{x 2})\r\n           (let closure (f :a))\r\n           (closure)`,\r\n    out: `{:a 2}`,\r\n  },\r\n  {\r\n    name: \"Vector closure\",\r\n    code: `(function f x #[1 x %])\r\n           (let closure (f 2))\r\n           (closure 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Closure as head\",\r\n    code: `(#[% %1 %2] 1 2 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Partial closure 1\",\r\n    code: `(@[] 1 2 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Partial closure 2\",\r\n    code: `(@((do +) 2) 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Parameterised closure 1\",\r\n    code: `((fn a b (+ a b)) 2 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Parameterised closure 2\",\r\n    code: `((fn a b (print-str a b) (+ a b)) 2 2)`,\r\n    out: `224`,\r\n  },\r\n  {\r\n    name: \"Destructure var\",\r\n    code: `(var [x [y]] [1 [2]]) [y x]`,\r\n    out: `[2 1]`,\r\n  },\r\n  {\r\n    name: \"Destructure string\",\r\n    code: `(let [a b c] \"hello\") [a b c]`,\r\n    out: `[\"h\" \"e\" \"l\"]`,\r\n  },\r\n  {\r\n    name: \"Destructure function\",\r\n    code: `(function f a [[b c] d] e [e d c b a]) (f 0 [[1 2] 3] 4)`,\r\n    out: `[4 3 2 1 0]`,\r\n  },\r\n  {\r\n    name: \"Destructuring closure\",\r\n    code: `(let f (fn a [b [c]] d [d c b a])) (f 0 [1 [2]] 3)`,\r\n    out: `[3 2 1 0]`,\r\n  },\r\n  {\r\n    name: \"Destructuring fn decoy\",\r\n    code: `(let f (fn a [a [a]])) (f 0)`,\r\n    out: `[0 [0]]`,\r\n  },\r\n  { name: \"Threading\", code: \"(-> 1 inc @(+ 10))\", out: `12` },\r\n  //Runtime errors\r\n  {\r\n    name: \"String instead of number\",\r\n    code: `(function sum (.. + args))\r\n           (print (sum 2 2))\r\n           (sum 2 \"hi\")`,\r\n    out: `4`,\r\n    err: [\"Type\"],\r\n  },\r\n  { name: \"Reference non-existing\", code: `x`, err: [\"Reference\"] },\r\n  {\r\n    name: \"Expired let retrieve\",\r\n    code: `(function f (let a 1) a) (f) a`,\r\n    err: [\"Reference\"],\r\n  },\r\n  { name: \"Call non-existing\", code: `(x)`, err: [\"External\"] },\r\n  { name: \"Call budget\", code: `(function f (f)) (f)`, err: [\"Budget\"] },\r\n  {\r\n    name: \"Loop budget\",\r\n    code: `(var n 10000)\r\n           (while (< 0 n)\r\n             (var n (dec n)))`,\r\n    err: [\"Budget\"],\r\n  },\r\n  { name: \"Range budget\", code: `(range 10000)`, err: [\"Budget\"] },\r\n  {\r\n    name: \"Head exe arity check\",\r\n    code: `(((fn +)) 1)`,\r\n    err: [\"Arity\"],\r\n  },\r\n  //Complex functions\r\n  {\r\n    name: \"Fibonacci 13\",\r\n    code: `(function fib n\r\n             (if (< n 2) n\r\n               (+ (fib (dec n))\r\n                  (fib (- n 2)))))\r\n           (fib 13)`,\r\n    out: `233`,\r\n  },\r\n  {\r\n    name: \"dedupe (recur)\",\r\n    code: `(function dedupe list -out\r\n             (let out (or -out []))\r\n             (let next (if (out (0 list)) [] [(0 list)]))\r\n             (if (empty? list) out\r\n                 (recur (sect list) (into out next))))\r\n           (dedupe [1 1 2 3 3 3])`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"frequencies\",\r\n    code: `(function frequencies list\r\n             (reduce #(push % %1 (inc (or (% %1) 0))) {} list))\r\n           (frequencies \"12121212\")`,\r\n    out: `{\"1\" 4, \"2\" 4}`,\r\n  },\r\n  //Test environment functions\r\n  {\r\n    name: \"set get\",\r\n    code: `[($globals.time_offset 5.5) $globals.time_offset]`,\r\n    out: `[5.5 5.5]`,\r\n  },\r\n  { name: \"exe\", code: `(test.function 123)`, out: `123\\nnull` },\r\n  //Syntax errors\r\n  { name: \"Empty parens\", code: `()`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 1\", code: `(print (\"hello!\")`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 2\", code: `print \"hello!\")`, err: [\"Parse\"] },\r\n  {\r\n    name: \"Imbalanced quotes\",\r\n    code: `(print \"Hello)`,\r\n    err: [\"Parse\"],\r\n  },\r\n  { name: \"Function as op\", code: `(function)`, err: [\"Parse\"] },\r\n  { name: \"Function without name\", code: `(function (+))`, err: [\"Parse\"] },\r\n  { name: \"Function without body\", code: `(function func)`, err: [\"Parse\"] },\r\n  { name: \"Variable not symbol\", code: `(var 1 2)`, err: [\"Parse\"] },\r\n  //Parser type and arity errors\r\n  { name: \"Parser type error 1\", code: `(function f (+ 1 :a))`, err: [\"Type\"] },\r\n  {\r\n    name: \"Parser type error 2\",\r\n    code: `(function f (+ 1 (into {} {})))`,\r\n    err: [\"Type\"],\r\n  },\r\n  {\r\n    name: \"Parser type error 3\",\r\n    code: `(function f (if true (into 2 {}) (+ 2 2)))`,\r\n    err: [\"Type\"],\r\n  },\r\n  { name: \"Parser arity error 1\", code: `(abs)`, err: [\"Parse\"] },\r\n];\r\n\r\nexport function doTests(\r\n  invoke: (\r\n    ctx: Ctx,\r\n    code: string,\r\n    sourceId: string,\r\n    print: boolean,\r\n  ) => InvokeResult,\r\n  terse = true,\r\n): string[] {\r\n  const results: {\r\n    okErr: boolean;\r\n    okOut: boolean;\r\n    elapsedMs: number;\r\n    display: string;\r\n  }[] = [];\r\n  for (let t = 0; t < len(tests); ++t) {\r\n    const { name, code, err, out } = tests[t];\r\n    const state: State = {\r\n      dict: new Map<string, Val>(),\r\n      output: \"\",\r\n    };\r\n    const env: Env = { funcs: {}, vars: {} };\r\n    const startTime = getTimeMs();\r\n    const valOrErrs = invoke(\r\n      {\r\n        get: (key: string) => get(state, key),\r\n        set: (key: string, val: Val) => set(state, key, val),\r\n        print(str, withNewLine) {\r\n          state.output += str + (withNewLine ? \"\\n\" : \"\");\r\n        },\r\n        exe: (name: string, args: Val[]) => exe(state, name, args),\r\n        functions: [],\r\n        env,\r\n        loopBudget: 10000,\r\n        rangeBudget: 1000,\r\n        callBudget: 1000,\r\n        recurBudget: 10000,\r\n      },\r\n      code,\r\n      code,\r\n      true,\r\n    );\r\n    const errors = valOrErrs.kind === \"errors\" ? valOrErrs.errors : [];\r\n    const okErr = (err || []).join() === errors.map(({ e }) => e).join();\r\n    const okOut = !out || trim(state.output) === out;\r\n    const elapsedMs = getTimeMs() - startTime;\r\n    const [tNum, tName, tElapsed, tOutput, tErrors] = [\r\n      padEnd(`${t + 1}`, 3),\r\n      padEnd(name, 24),\r\n      padEnd(`${elapsedMs}ms`, 6),\r\n      okOut || out + \"\\t!=\\t\" + trim(state.output),\r\n      okErr ||\r\n        errors.map(\r\n          ({ e, m, errCtx: { line, col } }) => `${e} ${line}:${col}: ${m}`,\r\n        ),\r\n    ];\r\n    results.push({\r\n      okErr,\r\n      okOut,\r\n      elapsedMs,\r\n      display: `${tNum} ${tName} ${tElapsed} ${tOutput} ${tErrors}`,\r\n    });\r\n  }\r\n  const totalMs = results.reduce((sum, { elapsedMs }) => sum + elapsedMs, 0);\r\n  const numPassed = len(results.filter(({ okOut, okErr }) => okOut && okErr));\r\n  return concat(\r\n    results.filter(r => !terse || !r.okOut || !r.okErr).map(r => r.display),\r\n    [`---- ${numPassed}/${len(results)} tests passed in ${totalMs}ms.`],\r\n  );\r\n}\r\n","import { len, slice, splice } from \"./poly-fills\";\r\nimport { assertUnreachable, Dict, Func, InvokeError, Val } from \"./types\";\r\n\r\nexport const num = ({ v }: Val) => v as number;\r\nexport const str = ({ v }: Val) => v as string;\r\nexport const vec = ({ v }: Val) => v as Val[];\r\nexport const dic = ({ v }: Val) => v as Dict;\r\n\r\nexport const isVecEqual = (a: Val[], b: Val[]): boolean =>\r\n  len(a) === len(b) && !a.some((x, i) => !isEqual(x, b[i]));\r\n\r\nexport const isEqual = (a: Val, b: Val) => {\r\n  if (a.t === \"wild\" || b.t === \"wild\") {\r\n    return true;\r\n  }\r\n  if (a.t !== b.t) {\r\n    return false;\r\n  }\r\n  switch (a.t) {\r\n    case \"null\":\r\n      return true;\r\n    case \"bool\":\r\n      return a.v === b.v;\r\n    case \"num\":\r\n      return a.v === b.v;\r\n    case \"vec\":\r\n      return isVecEqual(a.v, vec(b));\r\n    case \"dict\": {\r\n      const bd = dic(b);\r\n      return len(a.v.keys) === len(bd.keys) && isVecEqual(a.v.keys, bd.keys);\r\n    }\r\n    case \"str\":\r\n    case \"ref\":\r\n    case \"key\":\r\n    case \"func\":\r\n      return str(a) === str(b);\r\n    case \"clo\":\r\n      return (<Func>a.v).name === (<Func>b.v).name;\r\n  }\r\n  return assertUnreachable(a);\r\n};\r\n\r\nexport const stringify = (vals: Val[]) =>\r\n  vals.reduce((cat, v) => cat + val2str(v), \"\");\r\n\r\nexport const val2str = (val: Val): string => {\r\n  const quoted = (v: Val) => (v.t === \"str\" ? `\"${v.v}\"` : val2str(v));\r\n  if (val.t === \"clo\") {\r\n    return val.v.name;\r\n  } else if (val.t === \"vec\") {\r\n    return `[${val.v.map(quoted).join(\" \")}]`;\r\n  } else if (val.t === \"dict\") {\r\n    const { keys, vals } = val.v;\r\n    const [ks, vs] = [keys.map(quoted), vals.map(quoted)];\r\n    const entries = ks.map((k, i) => `${k} ${vs[i]}`);\r\n    return `{${entries.join(\", \")}}`;\r\n  } else if (val.t === \"null\") {\r\n    return \"null\";\r\n  } else if (val.t === \"wild\") {\r\n    return \"_\";\r\n  }\r\n  return `${val.v}`;\r\n};\r\n\r\nexport const asArray = (val: Val): Val[] =>\r\n  val.t === \"vec\"\r\n    ? slice(val.v)\r\n    : val.t === \"str\"\r\n    ? [...val.v].map(s => ({ t: \"str\", v: s }))\r\n    : val.t === \"dict\"\r\n    ? val.v.keys.map((k, i) => ({\r\n        t: \"vec\",\r\n        v: [k, val.v.vals[i]],\r\n      }))\r\n    : [];\r\n\r\nexport const toDict = (args: Val[]): Val => {\r\n  if (len(args) % 2 === 1) {\r\n    args.pop();\r\n  }\r\n  const keys = args.filter((_, i) => i % 2 === 0);\r\n  const vals = args.filter((_, i) => i % 2 === 1);\r\n  const ddKeys: Val[] = [],\r\n    ddVals: Val[] = [];\r\n  keys.forEach((key, i) => {\r\n    const existingIdx = ddKeys.findIndex(k => isEqual(k, key));\r\n    if (existingIdx === -1) {\r\n      ddKeys.push(key);\r\n      ddVals.push(vals[i]);\r\n    } else {\r\n      ddVals[existingIdx] = vals[i];\r\n    }\r\n  });\r\n  return {\r\n    t: \"dict\",\r\n    v: { keys: ddKeys, vals: ddVals },\r\n  };\r\n};\r\n\r\nexport const dictGet = ({ keys, vals }: Dict, key: Val) => {\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  return idx === -1 ? <Val>{ t: \"null\", v: undefined } : vals[idx];\r\n};\r\n\r\nexport const dictSet = ({ keys, vals }: Dict, key: Val, val: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    nVals[idx] = val;\r\n  } else {\r\n    nKeys.push(key);\r\n    nVals.push(val);\r\n  }\r\n  return <Dict>{ keys: nKeys, vals: nVals };\r\n};\r\n\r\nexport const dictDrop = ({ keys, vals }: Dict, key: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    splice(nKeys, idx, 1);\r\n    splice(nVals, idx, 1);\r\n  }\r\n  return <Val>{ t: \"dict\", v: <Dict>{ keys: nKeys, vals: nVals } };\r\n};\r\n\r\nexport function errorsToDict(errors: InvokeError[]) {\r\n  const newKey = (d: Dict, k: string, v: Val) =>\r\n    dictSet(d, { t: \"key\", v: k }, v);\r\n  return errors.map(({ e, m, errCtx }) => {\r\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\r\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\r\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\r\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\r\n    return <Val>{ t: \"dict\", v: dict };\r\n  });\r\n}\r\n","export const insituxVersion = 20211227;\r\nimport { asBoo } from \"./checks\";\r\nimport { arityCheck, keyOpErr, numOpErr, typeCheck, typeErr } from \"./checks\";\r\nimport { parse } from \"./parse\";\r\nimport * as pf from \"./poly-fills\";\r\nconst { abs, cos, sin, tan, sign, sqrt, floor, ceil, round, max, min } = pf;\r\nconst { logn, log2, log10 } = pf;\r\nconst { concat, has, flat, push, reverse, slice, splice, sortBy } = pf;\r\nconst { ends, slen, starts, sub, subIdx, substr, upperCase, lowerCase } = pf;\r\nconst { trim, trimStart, trimEnd, charCode, codeChar, strIdx } = pf;\r\nconst { getTimeMs, randInt, randNum } = pf;\r\nconst { isNum, len, objKeys, range, toNum } = pf;\r\nimport { doTests } from \"./test\";\r\nimport { assertUnreachable, InvokeError, InvokeResult } from \"./types\";\r\nimport { ExternalFunction, ExternalHandler } from \"./types\";\r\nimport { Ctx, Dict, ErrCtx, Func, Ins, Val, ops, typeNames } from \"./types\";\r\nimport { asArray, isEqual, num, str, stringify, val2str, vec } from \"./val\";\r\nimport { dic, dictDrop, dictGet, dictSet, toDict } from \"./val\";\r\n\r\nconst externalOps: { [name: string]: ExternalHandler } = {};\r\nlet stack: Val[] = [];\r\nlet lets: { [key: string]: Val }[] = [];\r\nlet recurArgs: undefined | Val[];\r\nconst _boo = (v: boolean) => stack.push({ t: \"bool\", v });\r\nconst _num = (v: number) => stack.push({ t: \"num\", v });\r\nconst _str = (v = \"\") => stack.push({ t: \"str\", v });\r\nconst _vec = (v: Val[] = []) => stack.push({ t: \"vec\", v });\r\nconst _dic = (v: Dict) => stack.push({ t: \"dict\", v });\r\nconst _nul = () => stack.push({ t: \"null\", v: undefined });\r\nconst _fun = (v: string) => stack.push({ t: \"func\", v });\r\n\r\nfunction exeOp(\r\n  op: string,\r\n  args: Val[],\r\n  ctx: Ctx,\r\n  errCtx: ErrCtx,\r\n  checkArity: boolean,\r\n): InvokeError[] | undefined {\r\n  const tErr = (msg: string) => [typeErr(msg, errCtx)];\r\n  //Optional arity check\r\n  if (checkArity) {\r\n    const violations = arityCheck(op, len(args), errCtx);\r\n    if (violations) {\r\n      return violations;\r\n    }\r\n  }\r\n  //Argument type check\r\n  {\r\n    const violations = typeCheck(\r\n      op,\r\n      args.map(a => [a.t]),\r\n      errCtx,\r\n    );\r\n    if (violations) {\r\n      return violations;\r\n    }\r\n  }\r\n\r\n  switch (op) {\r\n    case \"str\":\r\n      stack.push({\r\n        t: \"str\",\r\n        v: stringify(args),\r\n      });\r\n      return;\r\n    case \"print\":\r\n    case \"print-str\":\r\n      ctx.print(stringify(args), op === \"print\");\r\n      _nul();\r\n      return;\r\n    case \"vec\":\r\n      _vec(args);\r\n      return;\r\n    case \"dict\": {\r\n      stack.push(toDict(args));\r\n      return;\r\n    }\r\n    case \"len\":\r\n      _num(\r\n        args[0].t === \"str\"\r\n          ? slen(args[0].v)\r\n          : args[0].t === \"vec\"\r\n          ? len(args[0].v)\r\n          : len(dic(args[0]).keys),\r\n      );\r\n      return;\r\n    case \"to-num\":\r\n      if (isNum(args[0].v)) {\r\n        _num(toNum(args[0].v));\r\n      } else {\r\n        _nul();\r\n      }\r\n      return;\r\n    case \"to-key\":\r\n      stack.push({ t: \"key\", v: `:${val2str(args[0])}` });\r\n      return;\r\n    case \"!\":\r\n      _boo(!asBoo(args[0]));\r\n      return;\r\n    case \"=\":\r\n    case \"!=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        if (isEqual(args[i - 1], args[i]) !== (op === \"=\")) {\r\n          _boo(false);\r\n          return;\r\n        }\r\n      }\r\n      stack.push(args[0]);\r\n      return;\r\n    case \"-\":\r\n      _num(\r\n        len(args) === 1\r\n          ? -num(args[0])\r\n          : args.map(num).reduce((sum, n) => sum - n),\r\n      );\r\n      return;\r\n    case \"**\":\r\n      _num(num(args[0]) ** (len(args) === 1 ? 2 : num(args[1])));\r\n      return;\r\n    case \"+\":\r\n      _num(args.map(num).reduce((sum, n) => sum + n));\r\n      return;\r\n    case \"*\":\r\n      _num(args.map(num).reduce((sum, n) => sum * n));\r\n      return;\r\n    case \"/\":\r\n      _num(args.map(num).reduce((sum, n) => sum / n));\r\n      return;\r\n    case \"//\":\r\n      _num(args.map(num).reduce((sum, n) => floor(sum / n)));\r\n      return;\r\n    case \"fast=\":\r\n    case \"fast!=\":\r\n      if (isEqual(args[0], args[1]) !== (op === \"fast=\")) {\r\n        _boo(false);\r\n        return;\r\n      }\r\n      stack.push(args[0]);\r\n      return;\r\n    case \"fast-\":\r\n      _num(<number>args[0].v - <number>args[1].v);\r\n      return;\r\n    case \"fast+\":\r\n      _num(<number>args[0].v + <number>args[1].v);\r\n      return;\r\n    case \"fast*\":\r\n      _num(<number>args[0].v * <number>args[1].v);\r\n      return;\r\n    case \"fast/\":\r\n      _num(<number>args[0].v / <number>args[1].v);\r\n      return;\r\n    case \"fast//\":\r\n      _num(floor(<number>args[0].v / <number>args[1].v));\r\n      return;\r\n    case \"fast<\":\r\n      _boo(<number>args[0].v < <number>args[1].v);\r\n      return;\r\n    case \"fast>\":\r\n      _boo(<number>args[0].v > <number>args[1].v);\r\n      return;\r\n    case \"fast<=\":\r\n      _boo(<number>args[0].v <= <number>args[1].v);\r\n      return;\r\n    case \"fast>=\":\r\n      _boo(<number>args[0].v >= <number>args[1].v);\r\n      return;\r\n    case \"rem\":\r\n      _num(args.map(num).reduce((sum, n) => sum % n));\r\n      return;\r\n    case \"min\":\r\n      _num(args.map(num).reduce((sum, n) => min(sum, n)));\r\n      return;\r\n    case \"max\":\r\n      _num(args.map(num).reduce((sum, n) => max(sum, n)));\r\n      return;\r\n    case \"<\":\r\n    case \">\":\r\n    case \"<=\":\r\n    case \">=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        const [a, b] = [<number>args[i - 1].v, <number>args[i].v];\r\n        if (\r\n          (op === \"<\" && a >= b) ||\r\n          (op === \">\" && a <= b) ||\r\n          (op === \"<=\" && a > b) ||\r\n          (op === \">=\" && a < b)\r\n        ) {\r\n          _boo(false);\r\n          return;\r\n        }\r\n      }\r\n      _boo(true);\r\n      return;\r\n    case \"inc\":\r\n      _num(<number>args[0].v + 1);\r\n      return;\r\n    case \"dec\":\r\n      _num(<number>args[0].v - 1);\r\n      return;\r\n    case \"abs\":\r\n      _num(abs(<number>args[0].v));\r\n      return;\r\n    case \"round\":\r\n      if (len(args) === 2) {\r\n        const x = 10 ** <number>args[0].v;\r\n        _num(round(<number>args[1].v * x) / x);\r\n      } else {\r\n        _num(round(<number>args[0].v));\r\n      }\r\n      return;\r\n    case \"sin\":\r\n    case \"cos\":\r\n    case \"tan\":\r\n    case \"sqrt\":\r\n    case \"floor\":\r\n    case \"ceil\":\r\n    case \"logn\":\r\n    case \"log2\":\r\n    case \"log10\":\r\n      _num(\r\n        { sin, cos, tan, sqrt, floor, ceil, logn, log2, log10 }[op](\r\n          num(args[0]),\r\n        ),\r\n      );\r\n      return;\r\n    case \"and\":\r\n      _boo(args.every(asBoo));\r\n      return;\r\n    case \"or\":\r\n      _boo(args.some(asBoo));\r\n      return;\r\n    case \"xor\":\r\n      if (asBoo(args[0]) !== asBoo(args[1])) {\r\n        stack.push(asBoo(args[0]) ? args[0] : args[1]);\r\n      } else {\r\n        _boo(false);\r\n      }\r\n      return;\r\n    case \"&\":\r\n    case \"|\":\r\n    case \"^\":\r\n    case \"<<\":\r\n    case \">>\":\r\n    case \">>>\":\r\n      const [a, b] = [num(args[0]), num(args[1])];\r\n      _num(\r\n        op === \"&\"\r\n          ? a & b\r\n          : op === \"|\"\r\n          ? a | b\r\n          : op === \"^\"\r\n          ? a ^ b\r\n          : op === \"<<\"\r\n          ? a << b\r\n          : op === \">>\"\r\n          ? a >> b\r\n          : a >>> b,\r\n      );\r\n      return;\r\n    case \"~\":\r\n      _num(~num(args[0]));\r\n      return;\r\n    case \"odd?\":\r\n    case \"even?\":\r\n      _boo(num(args[0]) % 2 === (op === \"odd?\" ? 1 : 0));\r\n      return;\r\n    case \"pos?\":\r\n    case \"neg?\":\r\n    case \"zero?\": {\r\n      const n = num(args[0]);\r\n      _boo(op === \"pos?\" ? n > 0 : op === \"neg?\" ? n < 0 : !n);\r\n      return;\r\n    }\r\n    case \"null?\":\r\n    case \"num?\":\r\n    case \"bool?\":\r\n    case \"str?\":\r\n    case \"dict?\":\r\n    case \"vec?\":\r\n    case \"key?\":\r\n    case \"func?\":\r\n    case \"wild?\":\r\n      _boo(\r\n        (op === \"null?\" && args[0].t === \"null\") ||\r\n          (op === \"num?\" && args[0].t === \"num\") ||\r\n          (op === \"bool?\" && args[0].t === \"bool\") ||\r\n          (op === \"str?\" && args[0].t === \"str\") ||\r\n          (op === \"dict?\" && args[0].t === \"dict\") ||\r\n          (op === \"vec?\" && args[0].t === \"vec\") ||\r\n          (op === \"key?\" && args[0].t === \"key\") ||\r\n          (op === \"func?\" && (args[0].t === \"func\" || args[0].t === \"clo\")) ||\r\n          (op === \"wild?\" && args[0].t === \"wild\"),\r\n      );\r\n      return;\r\n    case \"has?\":\r\n      _boo(sub(str(args[0]), str(args[1])));\r\n      return;\r\n    case \"idx\": {\r\n      let i = -1;\r\n      if (args[0].t === \"str\") {\r\n        if (args[1].t !== \"str\") {\r\n          return tErr(\"strings can only contain strings\");\r\n        }\r\n        if (len(args) < 3) {\r\n          i = subIdx(args[0].v, args[1].v);\r\n        } else {\r\n          const arr = args[0].v.split(\"\");\r\n          arr[num(args[2])] = args[1].v;\r\n          _str(arr.join(\"\"));\r\n          return;\r\n        }\r\n      } else if (args[0].t === \"vec\") {\r\n        if (len(args) < 3) {\r\n          i = args[0].v.findIndex(a => isEqual(a, args[1]));\r\n        } else {\r\n          const v = slice(args[0].v);\r\n          v[num(args[2])] = args[1];\r\n          _vec(v);\r\n          return;\r\n        }\r\n      }\r\n      if (i === -1) {\r\n        _nul();\r\n      } else {\r\n        _num(i);\r\n      }\r\n      return;\r\n    }\r\n    case \"map\":\r\n    case \"for\":\r\n    case \"reduce\":\r\n    case \"filter\":\r\n    case \"remove\":\r\n    case \"find\":\r\n    case \"count\": {\r\n      const closure = getExe(ctx, args.shift()!, errCtx);\r\n      if (op === \"map\" || op === \"for\") {\r\n        const badArg = args.findIndex(\r\n          ({ t }) => t !== \"vec\" && t !== \"str\" && t !== \"dict\",\r\n        );\r\n        if (badArg !== -1) {\r\n          const badType = typeNames[args[badArg].t];\r\n          return tErr(\r\n            `argument ${\r\n              badArg + 2\r\n            } must be either: string, vector, dictionary, not ${badType}`,\r\n          );\r\n        }\r\n      }\r\n\r\n      if (op === \"for\") {\r\n        const arrays = args.map(asArray);\r\n        const lims = arrays.map(len);\r\n        const divisors = lims.map((_, i) =>\r\n          slice(lims, 0, i + 1).reduce((sum, l) => sum * l),\r\n        );\r\n        divisors.unshift(1);\r\n        const lim = divisors.pop()!;\r\n        if (lim > ctx.loopBudget) {\r\n          return [{ e: \"Budget\", m: \"would exceed loop budget\", errCtx }];\r\n        }\r\n        const array: Val[] = [];\r\n        for (let t = 0; t < lim; ++t) {\r\n          const argIdxs = divisors.map((d, i) => floor((t / d) % lims[i]));\r\n          const errors = closure(arrays.map((a, i) => a[argIdxs[i]]));\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          array.push(stack.pop()!);\r\n        }\r\n        _vec(array);\r\n        return;\r\n      }\r\n\r\n      if (op === \"map\") {\r\n        const arrays = args.map(asArray);\r\n        const shortest = min(...arrays.map(len));\r\n        const array: Val[] = [];\r\n        for (let i = 0; i < shortest; ++i) {\r\n          const errors = closure(arrays.map(a => a[i]));\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          array.push(stack.pop()!);\r\n        }\r\n        _vec(array);\r\n        return;\r\n      }\r\n\r\n      if (op !== \"reduce\") {\r\n        const arrArg = args.shift()!;\r\n        const array = asArray(arrArg);\r\n        const isRemove = op === \"remove\",\r\n          isFind = op === \"find\",\r\n          isCount = op === \"count\";\r\n        const filtered: Val[] = [];\r\n        let count = 0;\r\n        for (let i = 0, lim = len(array); i < lim; ++i) {\r\n          const errors = closure([array[i], ...args]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const b = asBoo(stack.pop()!);\r\n          if (isCount) {\r\n            count += b ? 1 : 0;\r\n          } else if (isFind) {\r\n            if (b) {\r\n              stack.push(array[i]);\r\n              return;\r\n            }\r\n          } else if (b !== isRemove) {\r\n            filtered.push(array[i]);\r\n          }\r\n        }\r\n        switch (op) {\r\n          case \"count\":\r\n            _num(count);\r\n            return;\r\n          case \"find\":\r\n            _nul();\r\n            return;\r\n        }\r\n        if (arrArg.t === \"str\") {\r\n          _str(filtered.map(v => v.v).join(\"\"));\r\n        } else if (arrArg.t === \"dict\") {\r\n          stack.push(toDict(flat(filtered.map(v => <Val[]>v.v))));\r\n        } else {\r\n          _vec(filtered);\r\n        }\r\n        return;\r\n      }\r\n      const arrayVal = args.pop()!;\r\n      if (!has([\"vec\", \"dict\", \"str\"], arrayVal.t)) {\r\n        return tErr(\r\n          `must reduce either: string, vector, dictionary, not ${\r\n            typeNames[arrayVal.t]\r\n          }`,\r\n        );\r\n      }\r\n      const array = asArray(arrayVal);\r\n\r\n      if (!len(array)) {\r\n        if (len(args)) {\r\n          stack.push(args[0]);\r\n        } else {\r\n          _vec();\r\n        }\r\n        return;\r\n      }\r\n      if (len(array) < 2 && !len(args)) {\r\n        push(stack, array);\r\n        return;\r\n      }\r\n\r\n      let reduction: Val = (len(args) ? args : array).shift()!;\r\n      for (let i = 0, lim = len(array); i < lim; ++i) {\r\n        const errors = closure([reduction, array[i]]);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        reduction = stack.pop()!;\r\n      }\r\n      stack.push(reduction);\r\n      return;\r\n    }\r\n    case \"repeat\": {\r\n      const toRepeat = args.shift()!;\r\n      const result: Val[] = [];\r\n      const count = num(args[0]);\r\n      if (count > ctx.rangeBudget) {\r\n        return [{ e: \"Budget\", m: \"would exceed range budget\", errCtx }];\r\n      }\r\n      ctx.rangeBudget -= count;\r\n      if (toRepeat.t === \"func\" || toRepeat.t === \"clo\") {\r\n        const closure = getExe(ctx, toRepeat, errCtx);\r\n        for (let i = 0; i < count; ++i) {\r\n          const errors = closure([{ t: \"num\", v: i }]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          result.push(stack.pop()!);\r\n        }\r\n      } else {\r\n        for (let i = 0; i < count; ++i) {\r\n          result.push(toRepeat);\r\n        }\r\n      }\r\n      _vec(result);\r\n      return;\r\n    }\r\n    case \"->\": {\r\n      stack.push(args.shift()!);\r\n      for (let i = 0, end = len(args); i < end; ++i) {\r\n        const errors = getExe(ctx, args[i], errCtx)([stack.pop()!]);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"rand-int\":\r\n    case \"rand\":\r\n      {\r\n        const nArgs = len(args);\r\n        const [a, b] = [\r\n          nArgs < 2 ? 0 : num(args[0]),\r\n          nArgs === 0\r\n            ? 1 + toNum(op === \"rand-int\")\r\n            : nArgs === 1\r\n            ? num(args[0])\r\n            : num(args[1]),\r\n        ];\r\n        _num(op === \"rand-int\" ? randInt(a, b) : randNum(a, b));\r\n      }\r\n      return;\r\n    case \"do\":\r\n    case \"val\":\r\n      stack.push(op === \"do\" ? args.pop()! : args.shift()!);\r\n      return;\r\n    case \".\":\r\n    case \"..\":\r\n    case \"...\": {\r\n      const closure = getExe(ctx, args.shift()!, errCtx);\r\n      if (op === \".\") {\r\n        return closure(args);\r\n      }\r\n      let flatArgs: Val[] = args;\r\n      if (op === \"..\") {\r\n        flatArgs = flat(args.map(a => (a.t === \"vec\" ? a.v : [a])));\r\n      } else {\r\n        const a = flatArgs.pop()!;\r\n        push(flatArgs, flat([a.t === \"vec\" ? a.v : [a]]));\r\n      }\r\n      return closure(flatArgs);\r\n    }\r\n    case \"into\": {\r\n      if (args[0].t === \"vec\") {\r\n        _vec(concat(args[0].v, asArray(args[1])));\r\n      } else {\r\n        if (args[1].t === \"vec\") {\r\n          stack.push(\r\n            toDict(concat(flat(asArray(args[0]).map(vec)), args[1].v)),\r\n          );\r\n        } else {\r\n          const { keys, vals } = dic(args[0]);\r\n          const d1 = dic(args[1]);\r\n          _dic({ keys: concat(keys, d1.keys), vals: concat(vals, d1.vals) });\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"push\": {\r\n      if (args[0].t === \"vec\") {\r\n        const v = args[0].v;\r\n        if (len(args) < 3) {\r\n          _vec(concat(v, [args[1]]));\r\n        } else {\r\n          const n = num(args[2]);\r\n          _vec(concat(concat(slice(v, 0, n), [args[1]]), slice(v, n)));\r\n        }\r\n      } else {\r\n        if (len(args) < 3) {\r\n          stack.push(dictDrop(dic(args[0]), args[1]));\r\n        } else {\r\n          _dic(dictSet(dic(args[0]), args[1], args[2]));\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"sect\": {\r\n      const v = args[0];\r\n      const vlen = v.t === \"vec\" ? len(v.v) : slen(str(v));\r\n      let a = 0,\r\n        b = vlen;\r\n      switch (len(args)) {\r\n        case 1:\r\n          a = 1;\r\n          break;\r\n        case 2: {\r\n          const del = num(args[1]);\r\n          if (del < 0) {\r\n            b += del;\r\n          } else {\r\n            a += del;\r\n          }\r\n          break;\r\n        }\r\n        case 3: {\r\n          const skip = num(args[1]);\r\n          const take = num(args[2]);\r\n          a = skip < 0 ? vlen + skip + (take < 0 ? take : 0) : a + skip;\r\n          b = (take < 0 ? b : a) + take;\r\n          break;\r\n        }\r\n      }\r\n      a = max(a, 0);\r\n      b = min(b, vlen);\r\n      if (a > b) {\r\n        (v.t === \"vec\" ? _vec : _str)();\r\n        return;\r\n      }\r\n      if (v.t === \"vec\") {\r\n        _vec(slice(v.v, a, b));\r\n      } else {\r\n        _str(substr(str(args[0]), a, b - a));\r\n      }\r\n      return;\r\n    }\r\n    case \"reverse\":\r\n      if (args[0].t === \"str\") {\r\n        _str(stringify(reverse(asArray(args[0]))));\r\n      } else {\r\n        _vec(reverse(asArray(args[0])));\r\n      }\r\n      return;\r\n    case \"sort\": {\r\n      const src = asArray(args[0]);\r\n      if (!len(src)) {\r\n        _vec();\r\n        return;\r\n      }\r\n      const mapped: Val[][] = [];\r\n      if (len(args) === 1) {\r\n        push(\r\n          mapped,\r\n          src.map(v => [v, v]),\r\n        );\r\n      } else {\r\n        const closure = getExe(ctx, args.pop()!, errCtx);\r\n        for (let i = 0, lim = len(src); i < lim; ++i) {\r\n          const errors = closure([src[i]]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          mapped.push([src[i], stack.pop()!]);\r\n        }\r\n      }\r\n      const okT = mapped[0][1].t;\r\n      if (mapped.some(([_, { t }]) => t !== okT || !has([\"num\", \"str\"], t))) {\r\n        return tErr(\"can only sort by all number or all string\");\r\n      }\r\n      if (mapped[0][1].t === \"num\") {\r\n        sortBy(mapped, ([x, a], [y, b]) => (num(a) > num(b) ? 1 : -1));\r\n      } else {\r\n        sortBy(mapped, ([x, a], [y, b]) => (str(a) > str(b) ? 1 : -1));\r\n      }\r\n      _vec(mapped.map(([v]) => v));\r\n      return;\r\n    }\r\n    case \"range\": {\r\n      const [a, b, s] = args.map(num);\r\n      const edgeCase = s && s < 0 && a < b; //e.g. 1 4 -1\r\n      const [x, y] =\r\n        len(args) > 1 ? (edgeCase ? [b - 1, a - 1] : [a, b]) : [0, a];\r\n      const step = sign((y - x) * (s || 1)) * (s || 1);\r\n      const count = ceil(abs((y - x) / step));\r\n      if (!count) {\r\n        _vec([]);\r\n        return;\r\n      }\r\n      if (count > ctx.rangeBudget) {\r\n        return [{ e: \"Budget\", m: \"would exceed range budget\", errCtx }];\r\n      }\r\n      ctx.rangeBudget -= count;\r\n      const nums = range(count).map(n => n * step + x);\r\n      _vec(nums.map(v => <Val>{ t: \"num\", v }));\r\n      return;\r\n    }\r\n    case \"empty?\":\r\n      _boo(!len(asArray(args[0])));\r\n      return;\r\n    case \"keys\":\r\n    case \"vals\":\r\n      _vec(dic(args[0])[op === \"keys\" ? \"keys\" : \"vals\"]);\r\n      return;\r\n    case \"split\":\r\n      _vec(\r\n        str(args[len(args) - 1])\r\n          .split(len(args) - 1 ? str(args[0]) : \" \")\r\n          .map(v => <Val>{ t: \"str\", v }),\r\n      );\r\n      return;\r\n    case \"join\":\r\n      _str(asArray(args[1]).map(val2str).join(str(args[0])));\r\n      return;\r\n    case \"starts?\":\r\n    case \"ends?\":\r\n      _boo((op === \"starts?\" ? starts : ends)(str(args[1]), str(args[0])));\r\n      return;\r\n    case \"upper-case\":\r\n    case \"lower-case\":\r\n    case \"trim\":\r\n    case \"trim-start\":\r\n    case \"trim-end\":\r\n      _str(\r\n        (op === \"upper-case\"\r\n          ? upperCase\r\n          : op === \"lower-case\"\r\n          ? lowerCase\r\n          : op === \"trim\"\r\n          ? trim\r\n          : op === \"trim-start\"\r\n          ? trimStart\r\n          : trimEnd)(str(args[0])),\r\n      );\r\n      return;\r\n    case \"str*\": {\r\n      const text = str(args[0]);\r\n      _str(\r\n        range(max(ceil(num(args[1])), 0))\r\n          .map(n => text)\r\n          .join(\"\"),\r\n      );\r\n      return;\r\n    }\r\n    case \"char-code\": {\r\n      if (args[0].t === \"str\") {\r\n        const n = len(args) > 1 ? num(args[1]) : 0;\r\n        const s = str(args[0]);\r\n        if (slen(s) <= n || n < 0) {\r\n          _nul();\r\n        } else {\r\n          _num(charCode(strIdx(s, n)));\r\n        }\r\n      } else {\r\n        _str(codeChar(num(args[0])));\r\n      }\r\n      return;\r\n    }\r\n    case \"time\":\r\n      _num(getTimeMs());\r\n      return;\r\n    case \"version\":\r\n      _num(insituxVersion);\r\n      return;\r\n    case \"tests\":\r\n      _str(doTests(invoke, !(len(args) && asBoo(args[0]))).join(\"\\n\"));\r\n      return;\r\n    case \"symbols\":\r\n      _vec(symbols(ctx, false).map(v => ({ t: \"str\", v })));\r\n      return;\r\n    case \"eval\": {\r\n      delete ctx.env.funcs[\"entry\"];\r\n      const sLen = len(stack);\r\n      const sourceId = `${errCtx.sourceId} eval`;\r\n      const errors = parseAndExe(ctx, str(args[0]), sourceId);\r\n      if (errors) {\r\n        return [\r\n          { e: \"Eval\", m: \"error within evaluated code\", errCtx },\r\n          ...errors,\r\n        ];\r\n      }\r\n      if (sLen === len(stack)) {\r\n        _nul();\r\n      }\r\n      return;\r\n    }\r\n    case \"recur\":\r\n      recurArgs = args;\r\n      return;\r\n    case \"reset\":\r\n      ctx.env.vars = {};\r\n      ctx.env.funcs = {};\r\n      lets = [];\r\n      _nul();\r\n      return;\r\n  }\r\n\r\n  return [{ e: \"Unexpected\", m: \"operation doesn't exist\", errCtx }];\r\n}\r\n\r\nconst monoArityError = (t: Val[\"t\"], errCtx: ErrCtx) => [\r\n  {\r\n    e: \"Arity\",\r\n    m: `${typeNames[t]} as op requires one sole argument`,\r\n    errCtx,\r\n  },\r\n];\r\nfunction getExe(\r\n  ctx: Ctx,\r\n  op: Val,\r\n  errCtx: ErrCtx,\r\n  checkArity = true,\r\n): (params: Val[]) => InvokeError[] | undefined {\r\n  if (op.t === \"str\" || op.t === \"func\") {\r\n    const name = op.v;\r\n    if (ops[name]) {\r\n      if (ops[name].external) {\r\n        return (params: Val[]) => {\r\n          const valOrErr = externalOps[name](params);\r\n          if (valOrErr.kind === \"err\") {\r\n            return [{ e: \"External\", m: valOrErr.err, errCtx }];\r\n          }\r\n          stack.push(valOrErr.value);\r\n        };\r\n      }\r\n      return (params: Val[]) => exeOp(name, params, ctx, errCtx, checkArity);\r\n    }\r\n    if (name in ctx.env.funcs) {\r\n      return (params: Val[]) => exeFunc(ctx, ctx.env.funcs[name], params);\r\n    }\r\n    if (name in ctx.env.vars) {\r\n      return getExe(ctx, ctx.env.vars[name], errCtx);\r\n    }\r\n    if (name in lets[len(lets) - 1]) {\r\n      return getExe(ctx, lets[len(lets) - 1][name], errCtx);\r\n    }\r\n    if (starts(name, \"$\")) {\r\n      return (params: Val[]) => {\r\n        if (!len(params)) {\r\n          return monoArityError(op.t, errCtx);\r\n        }\r\n        const err = ctx.set(substr(name, 1), params[0]);\r\n        stack.push(params[0]);\r\n        return err ? [{ e: \"External\", m: err, errCtx }] : undefined;\r\n      };\r\n    }\r\n    return (params: Val[]) => {\r\n      const valAndErr = ctx.exe(name, params);\r\n      if (valAndErr.kind === \"val\") {\r\n        stack.push(valAndErr.value);\r\n        return;\r\n      }\r\n      return [{ e: \"External\", m: valAndErr.err, errCtx }];\r\n    };\r\n  } else if (op.t === \"clo\") {\r\n    return (params: Val[]) => exeFunc(ctx, op.v, params);\r\n  } else if (op.t === \"key\") {\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError(op.t, errCtx);\r\n      }\r\n      if (params[0].t === \"dict\") {\r\n        stack.push(dictGet(dic(params[0]), op));\r\n      } else if (params[0].t === \"vec\") {\r\n        const found = vec(params[0]).find(v => isEqual(v, op));\r\n        stack.push(found ?? { t: \"null\", v: undefined });\r\n      } else {\r\n        return keyOpErr(errCtx, [params[0].t]);\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"num\") {\r\n    const n = floor(op.v);\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError(op.t, errCtx);\r\n      }\r\n      const a = params[0];\r\n      if (a.t !== \"str\" && a.t !== \"vec\" && a.t !== \"dict\") {\r\n        return numOpErr(errCtx, [a.t]);\r\n      }\r\n      const arr = asArray(a),\r\n        alen = len(arr);\r\n      if ((n >= 0 && n >= alen) || (n < 0 && -n > alen)) {\r\n        _nul();\r\n      } else if (n < 0) {\r\n        stack.push(arr[alen + n]);\r\n      } else {\r\n        stack.push(arr[n]);\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"vec\") {\r\n    const { v } = op;\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError(op.t, errCtx);\r\n      }\r\n      const found = v.find(val => isEqual(val, params[0]));\r\n      if (found) {\r\n        stack.push(found);\r\n      } else {\r\n        _nul();\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"dict\") {\r\n    const dict = op.v;\r\n    return (params: Val[]) => {\r\n      if (len(params) === 1) {\r\n        stack.push(dictGet(dict, params[0]));\r\n      } else if (len(params) === 2) {\r\n        _dic(dictSet(dict, params[0], params[1]));\r\n      } else {\r\n        return [\r\n          { e: \"Arity\", m: \"provide 1 or 2 arguments for dictionary\", errCtx },\r\n        ];\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"bool\") {\r\n    const cond = op.v;\r\n    return (params: Val[]) => {\r\n      if (!len(params) || len(params) > 2) {\r\n        return [\r\n          { e: \"Arity\", m: \"provide 1 or 2 arguments for boolean\", errCtx },\r\n        ];\r\n      }\r\n      stack.push(\r\n        cond\r\n          ? params[0]\r\n          : len(params) > 1\r\n          ? params[1]\r\n          : { t: \"null\", v: undefined },\r\n      );\r\n      return;\r\n    };\r\n  }\r\n  return _ => [\r\n    { e: \"Operation\", m: `${val2str(op)} is an invalid operation`, errCtx },\r\n  ];\r\n}\r\n\r\nfunction errorsToDict(errors: InvokeError[]) {\r\n  const newKey = (d: Dict, k: string, v: Val) =>\r\n    dictSet(d, { t: \"key\", v: k }, v);\r\n  return errors.map(({ e, m, errCtx }) => {\r\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\r\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\r\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\r\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\r\n    return <Val>{ t: \"dict\", v: dict };\r\n  });\r\n}\r\n\r\nfunction destruct(args: Val[], shape: number[]): Val {\r\n  let arr: Val[] = args;\r\n  for (let a = 0, b = len(shape) - 1; a < b; ++a) {\r\n    const val = arr[shape[a]];\r\n    if (val.t === \"vec\") {\r\n      arr = val.v;\r\n    } else if (val.t === \"str\" && a + 1 === b && shape[a + 1] < slen(val.v)) {\r\n      return { t: \"str\", v: strIdx(val.v, shape[a + 1]) };\r\n    } else {\r\n      return { t: \"null\", v: undefined };\r\n    }\r\n  }\r\n  const pos = shape[len(shape) - 1];\r\n  return pos >= len(arr) ? { t: \"null\", v: undefined } : arr[pos];\r\n}\r\n\r\nfunction exeFunc(\r\n  ctx: Ctx,\r\n  func: Func,\r\n  args: Val[],\r\n  inClosure = false,\r\n): InvokeError[] | undefined {\r\n  --ctx.callBudget;\r\n  if (!inClosure) {\r\n    lets.push({});\r\n  }\r\n  const stackLen = len(stack);\r\n  for (let i = 0, lim = len(func.ins); i < lim; ++i) {\r\n    const ins = func.ins[i];\r\n    const { errCtx } = func.ins[i];\r\n\r\n    const tooManyLoops = ctx.loopBudget < 1;\r\n    if (tooManyLoops || ctx.callBudget < 1) {\r\n      return [\r\n        {\r\n          e: \"Budget\",\r\n          m: `${tooManyLoops ? \"looped\" : \"called\"} too many times`,\r\n          errCtx,\r\n        },\r\n      ];\r\n    }\r\n\r\n    switch (ins.typ) {\r\n      case \"val\":\r\n        stack.push(ins.value);\r\n        break;\r\n      case \"var\":\r\n        ctx.env.vars[ins.value] = stack[len(stack) - 1];\r\n        break;\r\n      case \"let\":\r\n        lets[len(lets) - 1][ins.value] = stack[len(stack) - 1];\r\n        break;\r\n      case \"dle\":\r\n      case \"dva\": {\r\n        const val = stack.pop()!;\r\n        let last: Val | undefined;\r\n        ins.value.forEach(({ name, position }) => {\r\n          if (ins.typ === \"dva\") {\r\n            last = ctx.env.vars[name] = destruct([val], position);\r\n          } else {\r\n            last = lets[len(lets) - 1][name] = destruct([val], position);\r\n          }\r\n        });\r\n        stack.push(last!);\r\n        break;\r\n      }\r\n      case \"npa\":\r\n      case \"upa\": {\r\n        const paramIdx = ins.value;\r\n        if (paramIdx === -1) {\r\n          _vec(args);\r\n        } else if (len(args) <= paramIdx) {\r\n          _nul();\r\n        } else {\r\n          stack.push(args[paramIdx]);\r\n        }\r\n        break;\r\n      }\r\n      case \"dpa\":\r\n        stack.push(destruct(args, ins.value));\r\n        break;\r\n      case \"ref\": {\r\n        const name = ins.value;\r\n        if (ops[name]) {\r\n          _fun(name);\r\n        } else if (starts(name, \"$\")) {\r\n          const valAndErr = ctx.get(substr(name, 1));\r\n          if (valAndErr.kind === \"err\") {\r\n            return [{ e: \"External\", m: valAndErr.err, errCtx }];\r\n          }\r\n          stack.push(valAndErr.value);\r\n        } else if (name in ctx.env.vars) {\r\n          stack.push(ctx.env.vars[name]);\r\n        } else if (name in lets[len(lets) - 1]) {\r\n          stack.push(lets[len(lets) - 1][name]);\r\n        } else if (name in ctx.env.funcs) {\r\n          _fun(name);\r\n        } else {\r\n          return [{ e: \"Reference\", m: `\"${name}\" did not exist`, errCtx }];\r\n        }\r\n        break;\r\n      }\r\n      case \"exa\":\r\n      case \"exe\": {\r\n        const closure = getExe(ctx, stack.pop()!, errCtx, ins.typ === \"exa\");\r\n        const nArgs = ins.value;\r\n        const params = splice(stack, len(stack) - nArgs, nArgs);\r\n        const errors = closure(params);\r\n        if (errors) {\r\n          //Find next catch statement\r\n          const nextCat = slice(func.ins, i).findIndex(\r\n            ins => ins.typ === \"cat\",\r\n          );\r\n          if (nextCat !== -1) {\r\n            i += nextCat;\r\n            lets[len(lets) - 1][\"errors\"] = {\r\n              t: \"vec\",\r\n              v: errorsToDict(errors),\r\n            };\r\n            break;\r\n          }\r\n          return errors;\r\n        }\r\n        if (recurArgs) {\r\n          lets[len(lets) - 1] = {};\r\n          i = -1;\r\n          const nArgs = ins.value;\r\n          args = recurArgs;\r\n          recurArgs = undefined;\r\n          --ctx.recurBudget;\r\n          if (!ctx.recurBudget) {\r\n            return [{ e: \"Budget\", m: `recurred too many times`, errCtx }];\r\n          }\r\n          break;\r\n        }\r\n        break;\r\n      }\r\n      case \"or\":\r\n        if (asBoo(stack[len(stack) - 1])) {\r\n          i += ins.value;\r\n        } else {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      case \"mat\": {\r\n        const a = stack[len(stack) - 2];\r\n        if (!isEqual(a, stack.pop()!)) {\r\n          i += ins.value;\r\n        } else {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      }\r\n      case \"if\":\r\n        if (!asBoo(stack.pop()!)) {\r\n          i += ins.value;\r\n        }\r\n        break;\r\n      case \"jmp\":\r\n      case \"cat\":\r\n        i += ins.value;\r\n        break;\r\n      case \"loo\":\r\n        i += ins.value;\r\n        --ctx.loopBudget;\r\n        break;\r\n      case \"pop\":\r\n        splice(stack, len(stack) - ins.value, ins.value);\r\n        break;\r\n      case \"ret\":\r\n        if (ins.value) {\r\n          splice(stack, stackLen, len(stack) - stackLen - 1);\r\n        } else {\r\n          _nul();\r\n        }\r\n        i = lim;\r\n        break;\r\n      case \"clo\":\r\n      case \"par\": {\r\n        const name = ins.value[0];\r\n        let cins = ins.value[1];\r\n        const isCapture = ({ typ, value }: Ins, i: number) =>\r\n          (typ === \"ref\" &&\r\n            !cins.find(i => i.typ === \"let\" && i.value === value)) ||\r\n          typ === \"npa\" ||\r\n          (typ === \"val\" && i + 1 !== len(cins) && cins[i + 1].typ === \"exe\");\r\n        const derefFunc: Func = {\r\n          name: \"\",\r\n          ins: cins\r\n            .map((ins, i) => {\r\n              if (i + 1 === len(cins)) {\r\n                return ins;\r\n              }\r\n              const possibleLet =\r\n                ins.typ === \"val\" &&\r\n                ins.value.t === \"str\" &&\r\n                cins[i + 1].typ === \"exe\" &&\r\n                lets[len(lets) - 1][ins.value.v];\r\n              return possibleLet\r\n                ? <Ins>{ typ: \"val\", value: possibleLet }\r\n                : ins;\r\n            })\r\n            .filter(isCapture),\r\n        };\r\n        const errors = exeFunc(ctx, derefFunc, args, true);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        const numIns = len(derefFunc.ins);\r\n        const captures = splice(stack, len(stack) - numIns, numIns);\r\n        cins = cins.map((ins, i) =>\r\n          isCapture(ins, i)\r\n            ? <Ins>{ typ: \"val\", value: captures.shift()!, errCtx }\r\n            : ins,\r\n        );\r\n        stack.push(<Val>{ t: \"clo\", v: <Func>{ name, ins: cins } });\r\n        break;\r\n      }\r\n      default:\r\n        assertUnreachable(ins);\r\n    }\r\n  }\r\n  if (!inClosure) {\r\n    lets.pop();\r\n    splice(stack, stackLen, len(stack) - (stackLen + 1));\r\n  }\r\n  return;\r\n}\r\n\r\nfunction parseAndExe(\r\n  ctx: Ctx,\r\n  code: string,\r\n  sourceId: string,\r\n): InvokeError[] | undefined {\r\n  const parsed = parse(code, sourceId);\r\n  if (len(parsed.errors)) {\r\n    return parsed.errors;\r\n  }\r\n  ctx.env.funcs = { ...ctx.env.funcs, ...parsed.funcs };\r\n  if (!(\"entry\" in ctx.env.funcs)) {\r\n    return;\r\n  }\r\n  return exeFunc(ctx, ctx.env.funcs[\"entry\"], []);\r\n}\r\n\r\nfunction ingestExternalOperations(functions: ExternalFunction[]) {\r\n  functions.forEach(({ name, definition, handler }) => {\r\n    if (ops[name] && !externalOps[name]) {\r\n      throw \"Redefining internal operations is disallowed.\";\r\n    }\r\n    ops[name] = { ...definition, external: true };\r\n    externalOps[name] = handler;\r\n  });\r\n}\r\n\r\nfunction removeExternalOperations(functions: ExternalFunction[]) {\r\n  functions.forEach(({ name }) => {\r\n    delete ops[name];\r\n    delete externalOps[name];\r\n  });\r\n}\r\n\r\n/**\r\n * Parses and executes the given code.\r\n * @param ctx An environment context you retain.\r\n * @param code The code to parse and execute.\r\n * @param sourceId A unique ID used in immediate or future invocation errors.\r\n * @param printResult Automatically print the final value of this invocation?\r\n * @returns Invocation errors caused during execution of the code,\r\n * or the final value of the invocation.\r\n */\r\nexport function invoke(\r\n  ctx: Ctx,\r\n  code: string,\r\n  sourceId: string,\r\n  printResult = false,\r\n): InvokeResult {\r\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\r\n  ingestExternalOperations(ctx.functions);\r\n  const errors = parseAndExe(ctx, code, sourceId);\r\n  removeExternalOperations(ctx.functions);\r\n  [ctx.callBudget, ctx.recurBudget] = [callBudget, recurBudget];\r\n  [ctx.loopBudget, ctx.rangeBudget] = [loopBudget, rangeBudget];\r\n  delete ctx.env.funcs[\"entry\"];\r\n  const value = stack.pop();\r\n  [stack, lets] = [[], []];\r\n  if (printResult && !errors && value) {\r\n    ctx.print(val2str(value), true);\r\n  }\r\n  return errors\r\n    ? { kind: \"errors\", errors }\r\n    : value\r\n    ? { kind: \"val\", value }\r\n    : { kind: \"empty\" };\r\n}\r\n\r\n/**\r\n * Executes a user-defined Insitux function by name.\r\n * @param ctx An environment context you retain.\r\n * @param funcName The function to execute.\r\n * @param params The parameters to pass to the function.\r\n * @returns Invocation errors caused during execution of the function,\r\n * or the final value of the invocation,\r\n * or undefined if the function was not found.\r\n */\r\nexport function invokeFunction(\r\n  ctx: Ctx,\r\n  funcName: string,\r\n  params: Val[],\r\n): InvokeResult | undefined {\r\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\r\n  if (!(funcName in ctx.env.funcs)) {\r\n    return;\r\n  }\r\n  ingestExternalOperations(ctx.functions);\r\n  const errors = exeFunc(ctx, ctx.env.funcs[funcName], params);\r\n  removeExternalOperations(ctx.functions);\r\n  [ctx.callBudget, ctx.recurBudget] = [callBudget, recurBudget];\r\n  [ctx.loopBudget, ctx.rangeBudget] = [loopBudget, rangeBudget];\r\n  const value = stack.pop()!;\r\n  [stack, lets] = [[], []];\r\n  return errors\r\n    ? { kind: \"errors\", errors }\r\n    : value\r\n    ? { kind: \"val\", value }\r\n    : { kind: \"empty\" };\r\n}\r\n\r\n/**\r\n * @param ctx An environment context you retain.\r\n * @param alsoSyntax To optionally include syntax symbols.\r\n * @returns List of symbols defined in Insitux, including built-in operations,\r\n * (optionally) syntax, constants, and user-defined functions.\r\n */\r\nexport function symbols(ctx: Ctx, alsoSyntax = true): string[] {\r\n  let syms = alsoSyntax\r\n    ? [\"function\", \"let\", \"var\", \"if\", \"if!\", \"when\", \"while\", \"match\", \"catch\"]\r\n    : [];\r\n  push(syms, [\"args\", \"PI\", \"E\"]);\r\n  syms = concat(syms, objKeys(ops));\r\n  syms = concat(syms, objKeys(ctx.env.funcs));\r\n  syms = concat(syms, objKeys(ctx.env.vars));\r\n  const hidden = [\"entry\"];\r\n  syms = syms.filter(o => !has(hidden, o));\r\n  return sortBy(syms, (a, b) => (a > b ? 1 : -1));\r\n}\r\n","import { invoke } from \".\";\r\nimport { getTimeMs, padEnd, slen, substr, trimStart } from \"./poly-fills\";\r\nimport { Ctx } from \"./types\";\r\n\r\nexport type InvokeOutput = {\r\n  type: \"message\" | \"error\";\r\n  text: string;\r\n}[];\r\n\r\nconst invocations = new Map<string, string>();\r\nexport const parensRx = /[\\[\\]\\(\\) ,]/;\r\n\r\nexport function invoker(ctx: Ctx, code: string): InvokeOutput {\r\n  const uuid = getTimeMs().toString();\r\n  invocations.set(uuid, code);\r\n  const valOrErrs = invoke(ctx, code, uuid, true);\r\n  if (valOrErrs.kind !== \"errors\") {\r\n    return [];\r\n  }\r\n  let out: InvokeOutput = [];\r\n  valOrErrs.errors.forEach(({ e, m, errCtx: { line, col, sourceId } }) => {\r\n    const invocation = invocations.get(sourceId);\r\n    if (!invocation) {\r\n      out.push({\r\n        type: \"message\",\r\n        text: `${e} Error: line ${line} col ${col}: ${m}\\n`,\r\n      });\r\n      return;\r\n    }\r\n    const lineText = invocation.split(\"\\n\")[line - 1];\r\n    const sym = substr(lineText, col - 1).split(parensRx)[0];\r\n    const half1 = trimStart(substr(lineText, 0, col - 1));\r\n    out.push({ type: \"message\", text: padEnd(`${line}`, 4) + half1 });\r\n    if (!sym) {\r\n      const half2 = substr(lineText, col);\r\n      out.push({ type: \"error\", text: lineText[col - 1] });\r\n      out.push({ type: \"message\", text: `${half2}\\n` });\r\n    } else {\r\n      const half2 = substr(lineText, col - 1 + slen(sym));\r\n      out.push({ type: \"error\", text: sym });\r\n      out.push({ type: \"message\", text: `${half2}\\n` });\r\n    }\r\n    out.push({ type: \"message\", text: `${e} Error: ${m}.\\n` });\r\n  });\r\n  return out;\r\n}\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","toNum","x","Number","slice","arr","start","end","splice","numDel","len","length","slen","str","isNum","isNaN","isArray","Array","substr","substring","strIdx","idx","sub","s","includes","subIdx","indexOf","has","y","starts","startsWith","ends","endsWith","flat","concat","a","b","push","add","sortBy","by","sort","reverse","lowerCase","toLowerCase","upperCase","toUpperCase","trim","trimStart","trimEnd","padEnd","charCode","charCodeAt","codeChar","num","String","fromCharCode","randNum","Math","random","randInt","floor","range","keys","objKeys","getTimeMs","Date","getTime","abs","min","max","sin","cos","tan","sqrt","round","ceil","sign","logn","log","log2","log10","ops","print","returns","exactArity","minArity","numeric","maxArity","inc","dec","and","or","xor","rem","vec","dict","params","map","for","reduce","filter","remove","find","count","repeat","rand","into","sect","vals","do","val","split","join","time","version","tests","symbols","eval","reset","recur","typeNames","null","bool","ref","func","clo","wild","asBoo","t","v","arityCheck","op","nArg","errCtx","aErr","msg","amount","e","m","typeCheck","args","optimistic","types","onlyNum","nonNumArgIdx","findIndex","names","typeErr","typeViolations","need","i","argTypes","some","r","numOpErr","keyOpErr","nullVal","falseVal","isToken","node","symAt","pos","arg","typ","text","node2str","nodes","n","parseNode","parseArg","parseForm","doArityCheck","nodeParser","firstNode","shift","head","unshift","err","eCtx","cond","branch1","branch2","body","bodyIns","otherwise","pop","elseLen","insCount","acc","when","defs","d","lim","def","defIns","shape","errors","parseParams","asStr","parsedParams","forEach","ins","paramNames","name","param","position","consumeLast","errs","parsed","compileFunc","insErrorDetect","fins","stack","badMatch","okTypes","headIs","badArg","parse","code","sourceId","tokens","stringError","makeCollsOps","emitComments","isDigit","ch","inString","line","col","inStringAt","inSymbol","inNumber","inHex","l","c","nextCh","isWhite","nl","isParen","hexStart","tokenise","tokenErrors","countTyp","numL","numR","untimely","direction","depth","findParenImbalance","emptyHead","lastWasL","tokenErrorDetect","funcs","okFuncs","collected","entries","collectFuncs","_treeise","prefix","token","treeise","namedNodes","nodeOrErr","fae","f","state","kind","set","exe","output","out","dic","isVecEqual","isEqual","bd","stringify","cat","val2str","quoted","ks","vs","k","asArray","toDict","_","ddKeys","ddVals","existingIdx","dictGet","dictSet","nKeys","nVals","externalOps","recurArgs","lets","_boo","_num","_str","_vec","_dic","_nul","_fun","monoArityError","getExe","ctx","checkArity","external","valOrErr","tErr","violations","sum","every","closure","arrays","lims","divisors","loopBudget","argIdxs","shortest","arrArg","isRemove","isFind","isCount","filtered","arrayVal","array","reduction","toRepeat","result","rangeBudget","nArgs","flatArgs","d1","dictDrop","vlen","del","skip","take","src","mapped","okT","edgeCase","step","nums","invoke","terse","results","Map","env","vars","startTime","valOrErrs","withNewLine","functions","callBudget","recurBudget","okErr","okOut","elapsedMs","tNum","tName","tElapsed","tOutput","tErrors","display","totalMs","numPassed","doTests","alsoSyntax","syms","hidden","sLen","parseAndExe","exeOp","exeFunc","valAndErr","found","alen","newKey","destruct","inClosure","stackLen","tooManyLoops","last","paramIdx","nextCat","cins","isCapture","derefFunc","possibleLet","numIns","captures","printResult","handler","removeExternalOperations","invocations","parensRx","invoker","uuid","toString","invocation","type","lineText","sym","half1","half2"],"sourceRoot":""}